import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:speech_to_text/speech_to_text.dart' as stt;
import 'package:flutter_tts/flutter_tts.dart';
import 'package:flutter/foundation.dart';
import '../../../../core/utils/permission_handler.dart';
import '../../../../core/services/web_permission_service.dart';
import '../../domain/services/speech_service.dart';
import '../providers/speaking_practice_provider.dart';

class SpeakingPracticeScreen extends ConsumerStatefulWidget {
  const SpeakingPracticeScreen({super.key});

  @override
  ConsumerState<SpeakingPracticeScreen> createState() =>
      _SpeakingPracticeScreenState();
}

class _SpeakingPracticeScreenState
    extends ConsumerState<SpeakingPracticeScreen> {
  final stt.SpeechToText _speech = stt.SpeechToText();
  final FlutterTts _flutterTts = FlutterTts();
  final WebPermissionService _webPermissionService = WebPermissionService();
  bool _isListening = false;
  String _text = '';
  bool _hasPermission = false;
  bool _isSpeaking = false;
  bool _isInitializing = false;
  bool _isConversationComplete = true;
  bool _showToast = false;
  String _toastMessage = '';
  final List<Map<String, String>> _conversationHistory = [];
  final ScrollController _scrollController = ScrollController();

  final List<String> _suggestions = [
    "What's your favorite hobby?",
    "Tell me about your day.",
    "What's your favorite movie?",
    "How's the weather today?",
    "What did you do last weekend?",
    "What's your favorite food?",
    "Tell me about your family.",
    "What's your dream job?",
    "What's your favorite book?",
    "What's your favorite place to visit?",
  ];

  @override
  void initState() {
    super.initState();
    _initSpeech();
    _initTts();
    Future.microtask(() {
      ref.read(speakingPracticeProvider.notifier).initialize();
    });
  }

  Future<void> _initTts() async {
    await _flutterTts.setLanguage('en-US');
    await _flutterTts.setSpeechRate(0.5);
    await _flutterTts.setVolume(1.0);
    await _flutterTts.setPitch(1.0);
  }

  Future<void> _initSpeech() async {
    if (kIsWeb) {
      try {
        debugPrint('üé§ [STT] Requesting microphone permission for web...');
        final hasPermission =
            await _webPermissionService.requestMicrophonePermission();
        setState(() => _hasPermission = hasPermission);
        if (hasPermission) {
          debugPrint('‚úÖ [STT] Web microphone permission granted');
          await _initializeSpeechToText();
        }
      } catch (e) {
        debugPrint('‚ùå [STT] Web microphone permission error: $e');
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(content: Text('ÎßàÏù¥ÌÅ¨ Í∂åÌïúÏù¥ ÌïÑÏöîÌï©ÎãàÎã§.')),
          );
        }
      }
    } else {
      debugPrint('üé§ [STT] Requesting microphone permission for native...');
      final hasPermission = await PermissionUtils.hasRequiredPermissions();
      setState(() => _hasPermission = hasPermission);
      if (hasPermission) {
        debugPrint('‚úÖ [STT] Native microphone permission granted');
        await _initializeSpeechToText();
      }
    }
  }

  Future<void> _initializeSpeechToText() async {
    debugPrint('üé§ [STT] Initializing speech recognition...');
    bool available = await _speech.initialize(
      onError: (error) {
        debugPrint('‚ùå [STT Error] $error');
      },
      onStatus: (status) {
        debugPrint('‚ÑπÔ∏è [STT Status] $status');
      },
    );

    if (!available) {
      debugPrint('‚ùå [STT] Speech recognition not available');
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('ÏùåÏÑ± Ïù∏Ïãù Í∏∞Îä•ÏùÑ ÏÇ¨Ïö©Ìï† Ïàò ÏóÜÏäµÎãàÎã§.')),
        );
      }
    } else {
      debugPrint('‚úÖ [STT] Speech recognition initialized successfully');
    }
  }

  void _showToastMessage(String message) {
    setState(() {
      _toastMessage = message;
      _showToast = true;
    });
    Future.delayed(const Duration(seconds: 2), () {
      if (mounted) {
        setState(() {
          _showToast = false;
        });
      }
    });
  }

  void _showFeedback(String message) {
    if (!mounted) return;

    showModalBottomSheet(
      context: context,
      backgroundColor: Colors.transparent,
      isDismissible: true,
      enableDrag: false,
      builder: (context) => Container(
        margin: const EdgeInsets.all(16),
        padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
        decoration: BoxDecoration(
          color: Theme.of(context).colorScheme.surface,
          borderRadius: BorderRadius.circular(16),
          boxShadow: [
            BoxShadow(
              color: Colors.black.withOpacity(0.1),
              blurRadius: 8,
              offset: const Offset(0, 2),
            ),
          ],
        ),
        child: Row(
          children: [
            Icon(
              Icons.info_outline,
              color: Theme.of(context).colorScheme.primary,
              size: 24,
            ),
            const SizedBox(width: 12),
            Expanded(
              child: Text(
                message,
                style: TextStyle(
                  color: Theme.of(context).colorScheme.onSurface,
                  fontSize: 14,
                  fontWeight: FontWeight.w500,
                ),
              ),
            ),
          ],
        ),
      ),
    ).then((_) {
      // Bottom sheetÍ∞Ä Îã´Ìûê Îïå Ï∂îÍ∞Ä ÏûëÏóÖÏù¥ ÌïÑÏöîÌïú Í≤ΩÏö∞ Ïó¨Í∏∞Ïóê ÏûëÏÑ±
    });
  }

  @override
  Widget build(BuildContext context) {
    final state = ref.watch(speakingPracticeProvider);

    return Scaffold(
      appBar: AppBar(
        title: const Text('Speaking Practice'),
      ),
      body: Stack(
        children: [
          Column(
            children: [
              // Ï∂îÏ≤ú ÏòàÎ¨∏ ÏÑπÏÖò
              Container(
                padding: const EdgeInsets.symmetric(vertical: 16),
                color: Colors.blue[50],
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Padding(
                      padding: const EdgeInsets.symmetric(horizontal: 16),
                      child: Row(
                        children: [
                          const Text(
                            'ÎåÄÌôî ÏãúÏûëÌïòÍ∏∞',
                            style: TextStyle(
                              fontSize: 18,
                              fontWeight: FontWeight.bold,
                            ),
                          ),
                          const SizedBox(width: 8),
                          Icon(Icons.arrow_forward_ios,
                              size: 16, color: Colors.blue[700]),
                        ],
                      ),
                    ),
                    const SizedBox(height: 12),
                    SizedBox(
                      height: 120,
                      child: ListView.builder(
                        scrollDirection: Axis.horizontal,
                        padding: const EdgeInsets.symmetric(horizontal: 12),
                        itemCount: _suggestions.length,
                        itemBuilder: (context, index) {
                          return Padding(
                            padding: const EdgeInsets.symmetric(horizontal: 4),
                            child: Card(
                              elevation: 2,
                              shape: RoundedRectangleBorder(
                                borderRadius: BorderRadius.circular(12),
                              ),
                              child: InkWell(
                                onTap: () {
                                  setState(() => _text = _suggestions[index]);
                                  _stopListening();
                                },
                                borderRadius: BorderRadius.circular(12),
                                child: Container(
                                  width: 200,
                                  padding: const EdgeInsets.all(16),
                                  child: Column(
                                    mainAxisAlignment: MainAxisAlignment.center,
                                    children: [
                                      Icon(
                                        Icons.chat_bubble_outline,
                                        color: Colors.blue[700],
                                        size: 24,
                                      ),
                                      const SizedBox(height: 8),
                                      Text(
                                        _suggestions[index],
                                        textAlign: TextAlign.center,
                                        style: TextStyle(
                                          color: Colors.blue[900],
                                          fontSize: 14,
                                        ),
                                      ),
                                    ],
                                  ),
                                ),
                              ),
                            ),
                          );
                        },
                      ),
                    ),
                  ],
                ),
              ),
              // ÎåÄÌôî Í∏∞Î°ù ÏÑπÏÖò
              Expanded(
                child: Container(
                  color: Colors.grey[100],
                  child: Stack(
                    children: [
                      ListView.builder(
                        controller: _scrollController,
                        padding: const EdgeInsets.fromLTRB(
                            16, 8, 16, 80), // ÌïòÎã® Ïó¨Î∞± Ï∂îÍ∞Ä
                        itemCount: state.conversationHistory.length,
                        itemBuilder: (context, index) {
                          final message = state.conversationHistory[index];
                          final isUser = message['role'] == 'user';
                          final showAvatar = index == 0 ||
                              state.conversationHistory[index - 1]['role'] !=
                                  message['role'];

                          return Padding(
                            padding: const EdgeInsets.only(bottom: 8),
                            child: Row(
                              mainAxisAlignment: isUser
                                  ? MainAxisAlignment.end
                                  : MainAxisAlignment.start,
                              crossAxisAlignment: CrossAxisAlignment.end,
                              children: [
                                if (!isUser && showAvatar) ...[
                                  CircleAvatar(
                                    radius: 16,
                                    backgroundColor: Colors.blue[100],
                                    child: const Icon(
                                      Icons.smart_toy,
                                      color: Colors.blue,
                                      size: 20,
                                    ),
                                  ),
                                  const SizedBox(width: 8),
                                ] else if (!isUser) ...[
                                  const SizedBox(width: 40),
                                ],
                                Flexible(
                                  child: Container(
                                    constraints: BoxConstraints(
                                      maxWidth:
                                          MediaQuery.of(context).size.width *
                                              0.7,
                                    ),
                                    padding: const EdgeInsets.symmetric(
                                      horizontal: 16,
                                      vertical: 10,
                                    ),
                                    decoration: BoxDecoration(
                                      color: isUser
                                          ? Colors.blue[100]
                                          : Colors.white,
                                      borderRadius: BorderRadius.only(
                                        topLeft: const Radius.circular(16),
                                        topRight: const Radius.circular(16),
                                        bottomLeft:
                                            Radius.circular(isUser ? 16 : 4),
                                        bottomRight:
                                            Radius.circular(isUser ? 4 : 16),
                                      ),
                                      boxShadow: [
                                        BoxShadow(
                                          color: Colors.black.withOpacity(0.05),
                                          blurRadius: 2,
                                          offset: const Offset(0, 1),
                                        ),
                                      ],
                                    ),
                                    child: Text(
                                      message['text'] ?? '',
                                      style: TextStyle(
                                        color: isUser
                                            ? Colors.blue[900]
                                            : Colors.black87,
                                        fontSize: 15,
                                      ),
                                    ),
                                  ),
                                ),
                                if (isUser && showAvatar) ...[
                                  const SizedBox(width: 8),
                                  CircleAvatar(
                                    radius: 16,
                                    backgroundColor: Colors.blue[100],
                                    child: const Icon(
                                      Icons.person,
                                      color: Colors.blue,
                                      size: 20,
                                    ),
                                  ),
                                ] else if (isUser) ...[
                                  const SizedBox(width: 40),
                                ],
                              ],
                            ),
                          );
                        },
                      ),
                      // Ïã§ÏãúÍ∞Ñ STT ÌÖçÏä§Ìä∏ ÌëúÏãú
                      if (state.text.isNotEmpty)
                        Positioned(
                          bottom: 16,
                          left: 16,
                          right: 16,
                          child: Container(
                            padding: const EdgeInsets.symmetric(
                              horizontal: 16,
                              vertical: 12,
                            ),
                            decoration: BoxDecoration(
                              color: Colors.white,
                              borderRadius: BorderRadius.circular(12),
                              boxShadow: [
                                BoxShadow(
                                  color: Colors.black.withOpacity(0.1),
                                  blurRadius: 4,
                                  offset: const Offset(0, 2),
                                ),
                              ],
                            ),
                            child: Row(
                              children: [
                                Icon(Icons.mic,
                                    color: Colors.blue[700], size: 20),
                                const SizedBox(width: 8),
                                Expanded(
                                  child: Text(
                                    state.text,
                                    style: TextStyle(
                                      color: Colors.blue[900],
                                      fontSize: 15,
                                      fontStyle: FontStyle.italic,
                                    ),
                                  ),
                                ),
                              ],
                            ),
                          ),
                        ),
                      // Ï≤òÎ¶¨ Ï§ë ÏÉÅÌÉú ÌëúÏãú
                      if (state.isProcessing || state.isSpeaking)
                        Positioned(
                          bottom: state.text.isNotEmpty ? 80 : 16,
                          left: 0,
                          right: 0,
                          child: Center(
                            child: Container(
                              padding: const EdgeInsets.symmetric(
                                horizontal: 16,
                                vertical: 8,
                              ),
                              decoration: BoxDecoration(
                                color: Colors.black.withOpacity(0.7),
                                borderRadius: BorderRadius.circular(20),
                              ),
                              child: Row(
                                mainAxisSize: MainAxisSize.min,
                                children: [
                                  const SizedBox(
                                    width: 16,
                                    height: 16,
                                    child: CircularProgressIndicator(
                                      strokeWidth: 2,
                                      valueColor: AlwaysStoppedAnimation<Color>(
                                          Colors.white),
                                    ),
                                  ),
                                  const SizedBox(width: 8),
                                  Text(
                                    state.isProcessing ? 'ÏÉùÍ∞Å Ï§ë...' : 'ÎßêÌïòÎäî Ï§ë...',
                                    style: const TextStyle(
                                      color: Colors.white,
                                      fontSize: 14,
                                    ),
                                  ),
                                ],
                              ),
                            ),
                          ),
                        ),
                    ],
                  ),
                ),
              ),
            ],
          ),
          // Ï§ëÏïô ÎßàÏù¥ÌÅ¨ Î≤ÑÌäº
          Positioned(
            bottom: 15,
            right: 15,
            child: Container(
              decoration: BoxDecoration(
                shape: BoxShape.circle,
                boxShadow: [
                  BoxShadow(
                    color: Colors.black.withOpacity(0.2),
                    blurRadius: 8,
                    offset: const Offset(0, 2),
                  ),
                ],
              ),
              child: Stack(
                alignment: Alignment.center,
                children: [
                  GestureDetector(
                    onTapDown: (_) => _startListening(),
                    onTapUp: (_) => _stopListening(),
                    onTapCancel: () => _stopListening(),
                    child: AnimatedContainer(
                      duration: const Duration(milliseconds: 200),
                      width: _isListening ? 72 : 56,
                      height: _isListening ? 72 : 56,
                      decoration: BoxDecoration(
                        shape: BoxShape.circle,
                        color: _isListening ? Colors.red : Colors.blue,
                        boxShadow: _isListening
                            ? [
                                BoxShadow(
                                  color: Colors.red.withOpacity(0.3),
                                  blurRadius: 12,
                                  spreadRadius: 4,
                                ),
                              ]
                            : null,
                      ),
                      child: Center(
                        child: AnimatedSwitcher(
                          duration: const Duration(milliseconds: 200),
                          child: _isListening
                              ? Column(
                                  mainAxisAlignment: MainAxisAlignment.center,
                                  children: [
                                    Icon(
                                      Icons.mic,
                                      color: Colors.white,
                                      size: 28,
                                    ),
                                    const SizedBox(height: 2),
                                    Text(
                                      'ÎßêÌïòÎäî Ï§ë...',
                                      style: TextStyle(
                                        color: Colors.white,
                                        fontSize: 10,
                                        fontWeight: FontWeight.bold,
                                      ),
                                    ),
                                  ],
                                )
                              : Icon(
                                  Icons.mic_none,
                                  color: Colors.white,
                                  size: 28,
                                ),
                        ),
                      ),
                    ),
                  ),
                  if (_isInitializing)
                    Container(
                      width: 56,
                      height: 56,
                      decoration: BoxDecoration(
                        shape: BoxShape.circle,
                        color: Colors.black.withOpacity(0.3),
                      ),
                      child: const Center(
                        child: SizedBox(
                          width: 24,
                          height: 24,
                          child: CircularProgressIndicator(
                            strokeWidth: 2,
                            valueColor:
                                AlwaysStoppedAnimation<Color>(Colors.white),
                          ),
                        ),
                      ),
                    ),
                ],
              ),
            ),
          ),
          // ÌÜ†Ïä§Ìä∏ Î©îÏãúÏßÄ
          if (_showToast)
            Center(
              child: AnimatedOpacity(
                duration: const Duration(milliseconds: 200),
                opacity: _showToast ? 1.0 : 0.0,
                child: Container(
                  padding: const EdgeInsets.symmetric(
                    horizontal: 24,
                    vertical: 12,
                  ),
                  decoration: BoxDecoration(
                    color: Colors.black.withOpacity(0.8),
                    borderRadius: BorderRadius.circular(20),
                    boxShadow: [
                      BoxShadow(
                        color: Colors.black.withOpacity(0.2),
                        blurRadius: 8,
                        offset: const Offset(0, 2),
                      ),
                    ],
                  ),
                  child: Row(
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      Icon(
                        Icons.info_outline,
                        color: Colors.white,
                        size: 20,
                      ),
                      const SizedBox(width: 8),
                      Text(
                        _toastMessage,
                        style: const TextStyle(
                          color: Colors.white,
                          fontSize: 14,
                          fontWeight: FontWeight.w500,
                        ),
                      ),
                    ],
                  ),
                ),
              ),
            ),
        ],
      ),
    );
  }

  Future<void> _startListening() async {
    if (!_hasPermission) {
      debugPrint('üé§ [STT] No permission, requesting...');
      if (kIsWeb) {
        await _initSpeech();
      } else {
        final granted = await PermissionUtils.requestRequiredPermissions();
        setState(() => _hasPermission = granted);
      }
      return;
    }

    final state = ref.read(speakingPracticeProvider);
    // API ÏùëÎãµÏù¥ÎÇò TTS Ïû¨ÏÉù Ï§ëÏóêÎäî ÏùåÏÑ± Ïù∏Ïãù ÏãúÏûëÌïòÏßÄ ÏïäÏùå
    if (state.isSpeaking || state.isProcessing) {
      debugPrint('‚ÑπÔ∏è [STT] Waiting for AI response or TTS to complete');
      return;
    }

    debugPrint('üé§ [STT] Starting speech recognition...');
    setState(() => _isInitializing = true);

    bool available = await _speech.initialize(
      onError: (error) {
        debugPrint('‚ùå [STT Error] $error');
        setState(() => _isInitializing = false);
      },
      onStatus: (status) {
        debugPrint('‚ÑπÔ∏è [STT Status] $status');
        if (status == 'done') {
          _stopListening();
        }
      },
    );

    if (available) {
      setState(() {
        _isListening = true;
        _isInitializing = false;
        _text = ''; // ÏÉàÎ°úÏö¥ ÎåÄÌôî ÏãúÏûë Ïãú ÌÖçÏä§Ìä∏ Ï¥àÍ∏∞Ìôî
      });
      _speech.listen(
        onResult: (result) {
          debugPrint('üé§ [STT] Partial result: ${result.recognizedWords}');
          setState(() {
            _text = result.recognizedWords;
          });

          // Ïã§ÏãúÍ∞ÑÏúºÎ°ú ProviderÎ•º ÌÜµÌï¥ ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
          ref.read(speakingPracticeProvider.notifier).updateCurrentText(_text);
        },
        listenFor: const Duration(seconds: 30),
        pauseFor: const Duration(seconds: 2),
        partialResults: true,
        onDevice: true,
        cancelOnError: true,
        listenMode: stt.ListenMode.confirmation,
      );
    } else {
      debugPrint('‚ùå [STT] Failed to initialize speech recognition');
      setState(() => _isInitializing = false);
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('ÏùåÏÑ± Ïù∏Ïãù Ï¥àÍ∏∞ÌôîÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.')),
        );
      }
    }
  }

  Future<void> _stopListening() async {
    if (_isListening) {
      debugPrint('üé§ [STT] Stopping speech recognition...');
      await _speech.stop();
      setState(() => _isListening = false);

      // ÌÖçÏä§Ìä∏Í∞Ä ÎÑàÎ¨¥ ÏßßÏúºÎ©¥ ÎåÄÌôîÎ°ú Ï≤òÎ¶¨ÌïòÏßÄ ÏïäÏùå
      if (_text.isEmpty || _text.length < 3) {
        debugPrint('‚ÑπÔ∏è [STT] Text too short, ignoring');
        _showFeedback('ÏùåÏÑ±Ïù¥ ÎÑàÎ¨¥ ÏßßÏäµÎãàÎã§. Ï¢Ä Îçî Í∏∏Í≤å ÎßêÏîÄÌï¥ Î≥¥ÏÑ∏Ïöî.');
        return;
      }

      try {
        // ÏÇ¨Ïö©Ïûê Î∞úÌôîÎ•º ÎåÄÌôî Í∏∞Î°ùÏóê Ï∂îÍ∞Ä
        ref.read(speakingPracticeProvider.notifier).addUserMessage(_text);

        // API ÏùëÎãµ ÎåÄÍ∏∞ Ï§ë ÏÉÅÌÉú ÌëúÏãú
        setState(() => _isSpeaking = true);

        final response = await ref
            .read(speakingPracticeProvider.notifier)
            .getConversationResponse(_text);

        debugPrint('ü§ñ [AI] Response: $response');

        // AI ÏùëÎãµÏùÑ ÎåÄÌôî Í∏∞Î°ùÏóê Ï∂îÍ∞Ä
        ref.read(speakingPracticeProvider.notifier).addAIMessage(response);

        setState(() {});
        _scrollToBottom();

        // TTSÎ°ú ÏùëÎãµ ÏùΩÏñ¥Ï£ºÍ∏∞
        await _speakResponse(response);
      } catch (e) {
        debugPrint('‚ùå [Error] API Error: $e');
        setState(() => _isSpeaking = false);
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(content: Text('API Ïò§Î•ò: $e')),
          );
        }
      }
    }
  }

  Future<void> _speakResponse(String text) async {
    setState(() => _isSpeaking = true);
    debugPrint('üîä [TTS] Speaking: $text');
    await _flutterTts.speak(text);
    _flutterTts.setCompletionHandler(() {
      debugPrint('‚úÖ [TTS] Completed');
      setState(() => _isSpeaking = false);
    });
  }

  void _scrollToBottom() {
    WidgetsBinding.instance.addPostFrameCallback((_) {
      if (_scrollController.hasClients) {
        _scrollController.animateTo(
          _scrollController.position.maxScrollExtent,
          duration: const Duration(milliseconds: 300),
          curve: Curves.easeOut,
        );
      }
    });
  }

  @override
  void dispose() {
    _flutterTts.stop();
    _speech.stop();
    _scrollController.dispose();
    _webPermissionService.dispose();
    super.dispose();
  }
}

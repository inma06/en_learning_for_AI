"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@chakra-ui+styled-system@2.9.2";
exports.ids = ["vendor-chunks/@chakra-ui+styled-system@2.9.2"];
exports.modules = {

/***/ "(ssr)/../../node_modules/.pnpm/@chakra-ui+styled-system@2.9.2/node_modules/@chakra-ui/styled-system/dist/index.mjs":
/*!********************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@chakra-ui+styled-system@2.9.2/node_modules/@chakra-ui/styled-system/dist/index.mjs ***!
  \********************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addPrefix: () => (/* binding */ addPrefix),\n/* harmony export */   background: () => (/* binding */ background),\n/* harmony export */   border: () => (/* binding */ border),\n/* harmony export */   calc: () => (/* binding */ calc),\n/* harmony export */   color: () => (/* binding */ color),\n/* harmony export */   createMultiStyleConfigHelpers: () => (/* binding */ createMultiStyleConfigHelpers),\n/* harmony export */   css: () => (/* binding */ css),\n/* harmony export */   cssVar: () => (/* binding */ cssVar),\n/* harmony export */   defineCssVars: () => (/* binding */ defineCssVars),\n/* harmony export */   defineStyle: () => (/* binding */ defineStyle),\n/* harmony export */   defineStyleConfig: () => (/* binding */ defineStyleConfig),\n/* harmony export */   effect: () => (/* binding */ effect),\n/* harmony export */   filter: () => (/* binding */ filter),\n/* harmony export */   flattenTokens: () => (/* binding */ flattenTokens),\n/* harmony export */   flexbox: () => (/* binding */ flexbox),\n/* harmony export */   getCSSVar: () => (/* binding */ getCSSVar),\n/* harmony export */   getCss: () => (/* binding */ getCss),\n/* harmony export */   grid: () => (/* binding */ grid),\n/* harmony export */   interactivity: () => (/* binding */ interactivity),\n/* harmony export */   isStyleProp: () => (/* binding */ isStyleProp),\n/* harmony export */   layout: () => (/* binding */ layout),\n/* harmony export */   layoutPropNames: () => (/* binding */ layoutPropNames),\n/* harmony export */   list: () => (/* binding */ list),\n/* harmony export */   omitThemingProps: () => (/* binding */ omitThemingProps),\n/* harmony export */   others: () => (/* binding */ others),\n/* harmony export */   position: () => (/* binding */ position),\n/* harmony export */   propNames: () => (/* binding */ propNames),\n/* harmony export */   pseudoPropNames: () => (/* binding */ pseudoPropNames),\n/* harmony export */   pseudoSelectors: () => (/* binding */ pseudoSelectors),\n/* harmony export */   resolveStyleConfig: () => (/* binding */ resolveStyleConfig),\n/* harmony export */   ring: () => (/* binding */ ring),\n/* harmony export */   scroll: () => (/* binding */ scroll),\n/* harmony export */   space: () => (/* binding */ space),\n/* harmony export */   systemProps: () => (/* binding */ systemProps),\n/* harmony export */   textDecoration: () => (/* binding */ textDecoration),\n/* harmony export */   toCSSVar: () => (/* binding */ toCSSVar),\n/* harmony export */   toVarDefinition: () => (/* binding */ toVarDefinition),\n/* harmony export */   toVarReference: () => (/* binding */ toVarReference),\n/* harmony export */   tokenToCSSVar: () => (/* binding */ tokenToCSSVar),\n/* harmony export */   transform: () => (/* binding */ transform),\n/* harmony export */   transition: () => (/* binding */ transition),\n/* harmony export */   typography: () => (/* binding */ typography)\n/* harmony export */ });\n/* harmony import */ var _chakra_ui_shared_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @chakra-ui/shared-utils */ \"(ssr)/../../node_modules/.pnpm/@chakra-ui+shared-utils@2.0.5/node_modules/@chakra-ui/shared-utils/dist/index.mjs\");\n/* harmony import */ var lodash_mergewith__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash.mergewith */ \"(ssr)/../../node_modules/.pnpm/lodash.mergewith@4.6.2/node_modules/lodash.mergewith/index.js\");\n// src/utils/create-transform.ts\n\nvar isImportant = (value)=>/!(important)?$/.test(value);\nvar withoutImportant = (value)=>typeof value === \"string\" ? value.replace(/!(important)?$/, \"\").trim() : value;\nvar tokenToCSSVar = (scale, value)=>(theme)=>{\n        const valueStr = String(value);\n        const important = isImportant(valueStr);\n        const valueWithoutImportant = withoutImportant(valueStr);\n        const key = scale ? `${scale}.${valueWithoutImportant}` : valueWithoutImportant;\n        let transformed = (0,_chakra_ui_shared_utils__WEBPACK_IMPORTED_MODULE_0__.isObject)(theme.__cssMap) && key in theme.__cssMap ? theme.__cssMap[key].varRef : value;\n        transformed = withoutImportant(transformed);\n        return important ? `${transformed} !important` : transformed;\n    };\nfunction createTransform(options) {\n    const { scale, transform: transform2, compose } = options;\n    const fn = (value, theme)=>{\n        var _a;\n        const _value = tokenToCSSVar(scale, value)(theme);\n        let result = (_a = transform2 == null ? void 0 : transform2(_value, theme)) != null ? _a : _value;\n        if (compose) {\n            result = compose(result, theme);\n        }\n        return result;\n    };\n    return fn;\n}\n// src/utils/pipe.ts\nvar pipe = (...fns)=>(v)=>fns.reduce((a, b)=>b(a), v);\n// src/utils/prop-config.ts\nfunction toConfig(scale, transform2) {\n    return (property)=>{\n        const result = {\n            property,\n            scale\n        };\n        result.transform = createTransform({\n            scale,\n            transform: transform2\n        });\n        return result;\n    };\n}\nvar getRtl = ({ rtl, ltr })=>(theme)=>theme.direction === \"rtl\" ? rtl : ltr;\nfunction logical(options) {\n    const { property, scale, transform: transform2 } = options;\n    return {\n        scale,\n        property: getRtl(property),\n        transform: scale ? createTransform({\n            scale,\n            compose: transform2\n        }) : transform2\n    };\n}\n// src/utils/templates.ts\nvar transformTemplate = [\n    \"rotate(var(--chakra-rotate, 0))\",\n    \"scaleX(var(--chakra-scale-x, 1))\",\n    \"scaleY(var(--chakra-scale-y, 1))\",\n    \"skewX(var(--chakra-skew-x, 0))\",\n    \"skewY(var(--chakra-skew-y, 0))\"\n];\nfunction getTransformTemplate() {\n    return [\n        \"translateX(var(--chakra-translate-x, 0))\",\n        \"translateY(var(--chakra-translate-y, 0))\",\n        ...transformTemplate\n    ].join(\" \");\n}\nfunction getTransformGpuTemplate() {\n    return [\n        \"translate3d(var(--chakra-translate-x, 0), var(--chakra-translate-y, 0), 0)\",\n        ...transformTemplate\n    ].join(\" \");\n}\nvar filterTemplate = {\n    \"--chakra-blur\": \"var(--chakra-empty,/*!*/ /*!*/)\",\n    \"--chakra-brightness\": \"var(--chakra-empty,/*!*/ /*!*/)\",\n    \"--chakra-contrast\": \"var(--chakra-empty,/*!*/ /*!*/)\",\n    \"--chakra-grayscale\": \"var(--chakra-empty,/*!*/ /*!*/)\",\n    \"--chakra-hue-rotate\": \"var(--chakra-empty,/*!*/ /*!*/)\",\n    \"--chakra-invert\": \"var(--chakra-empty,/*!*/ /*!*/)\",\n    \"--chakra-saturate\": \"var(--chakra-empty,/*!*/ /*!*/)\",\n    \"--chakra-sepia\": \"var(--chakra-empty,/*!*/ /*!*/)\",\n    \"--chakra-drop-shadow\": \"var(--chakra-empty,/*!*/ /*!*/)\",\n    filter: [\n        \"var(--chakra-blur)\",\n        \"var(--chakra-brightness)\",\n        \"var(--chakra-contrast)\",\n        \"var(--chakra-grayscale)\",\n        \"var(--chakra-hue-rotate)\",\n        \"var(--chakra-invert)\",\n        \"var(--chakra-saturate)\",\n        \"var(--chakra-sepia)\",\n        \"var(--chakra-drop-shadow)\"\n    ].join(\" \")\n};\nvar backdropFilterTemplate = {\n    backdropFilter: [\n        \"var(--chakra-backdrop-blur)\",\n        \"var(--chakra-backdrop-brightness)\",\n        \"var(--chakra-backdrop-contrast)\",\n        \"var(--chakra-backdrop-grayscale)\",\n        \"var(--chakra-backdrop-hue-rotate)\",\n        \"var(--chakra-backdrop-invert)\",\n        \"var(--chakra-backdrop-opacity)\",\n        \"var(--chakra-backdrop-saturate)\",\n        \"var(--chakra-backdrop-sepia)\"\n    ].join(\" \"),\n    \"--chakra-backdrop-blur\": \"var(--chakra-empty,/*!*/ /*!*/)\",\n    \"--chakra-backdrop-brightness\": \"var(--chakra-empty,/*!*/ /*!*/)\",\n    \"--chakra-backdrop-contrast\": \"var(--chakra-empty,/*!*/ /*!*/)\",\n    \"--chakra-backdrop-grayscale\": \"var(--chakra-empty,/*!*/ /*!*/)\",\n    \"--chakra-backdrop-hue-rotate\": \"var(--chakra-empty,/*!*/ /*!*/)\",\n    \"--chakra-backdrop-invert\": \"var(--chakra-empty,/*!*/ /*!*/)\",\n    \"--chakra-backdrop-opacity\": \"var(--chakra-empty,/*!*/ /*!*/)\",\n    \"--chakra-backdrop-saturate\": \"var(--chakra-empty,/*!*/ /*!*/)\",\n    \"--chakra-backdrop-sepia\": \"var(--chakra-empty,/*!*/ /*!*/)\"\n};\nfunction getRingTemplate(value) {\n    return {\n        \"--chakra-ring-offset-shadow\": `var(--chakra-ring-inset) 0 0 0 var(--chakra-ring-offset-width) var(--chakra-ring-offset-color)`,\n        \"--chakra-ring-shadow\": `var(--chakra-ring-inset) 0 0 0 calc(var(--chakra-ring-width) + var(--chakra-ring-offset-width)) var(--chakra-ring-color)`,\n        \"--chakra-ring-width\": value,\n        boxShadow: [\n            `var(--chakra-ring-offset-shadow)`,\n            `var(--chakra-ring-shadow)`,\n            `var(--chakra-shadow, 0 0 #0000)`\n        ].join(\", \")\n    };\n}\nvar flexDirectionTemplate = {\n    \"row-reverse\": {\n        space: \"--chakra-space-x-reverse\",\n        divide: \"--chakra-divide-x-reverse\"\n    },\n    \"column-reverse\": {\n        space: \"--chakra-space-y-reverse\",\n        divide: \"--chakra-divide-y-reverse\"\n    }\n};\n// src/utils/parse-gradient.ts\nvar directionMap = {\n    \"to-t\": \"to top\",\n    \"to-tr\": \"to top right\",\n    \"to-r\": \"to right\",\n    \"to-br\": \"to bottom right\",\n    \"to-b\": \"to bottom\",\n    \"to-bl\": \"to bottom left\",\n    \"to-l\": \"to left\",\n    \"to-tl\": \"to top left\"\n};\nvar valueSet = new Set(Object.values(directionMap));\nvar globalSet = /* @__PURE__ */ new Set([\n    \"none\",\n    \"-moz-initial\",\n    \"inherit\",\n    \"initial\",\n    \"revert\",\n    \"unset\"\n]);\nvar trimSpace = (str)=>str.trim();\nfunction parseGradient(value, theme) {\n    if (value == null || globalSet.has(value)) return value;\n    const prevent = isCSSFunction(value) || globalSet.has(value);\n    if (!prevent) return `url('${value}')`;\n    const regex = /(^[a-z-A-Z]+)\\((.*)\\)/g;\n    const results = regex.exec(value);\n    const type = results == null ? void 0 : results[1];\n    const values = results == null ? void 0 : results[2];\n    if (!type || !values) return value;\n    const _type = type.includes(\"-gradient\") ? type : `${type}-gradient`;\n    const [maybeDirection, ...stops] = values.split(\",\").map(trimSpace).filter(Boolean);\n    if ((stops == null ? void 0 : stops.length) === 0) return value;\n    const direction = maybeDirection in directionMap ? directionMap[maybeDirection] : maybeDirection;\n    stops.unshift(direction);\n    const _values = stops.map((stop)=>{\n        if (valueSet.has(stop)) return stop;\n        const firstStop = stop.indexOf(\" \");\n        const [_color, _stop] = firstStop !== -1 ? [\n            stop.substr(0, firstStop),\n            stop.substr(firstStop + 1)\n        ] : [\n            stop\n        ];\n        const _stopOrFunc = isCSSFunction(_stop) ? _stop : _stop && _stop.split(\" \");\n        const key = `colors.${_color}`;\n        const color2 = key in theme.__cssMap ? theme.__cssMap[key].varRef : _color;\n        return _stopOrFunc ? [\n            color2,\n            ...Array.isArray(_stopOrFunc) ? _stopOrFunc : [\n                _stopOrFunc\n            ]\n        ].join(\" \") : color2;\n    });\n    return `${_type}(${_values.join(\", \")})`;\n}\nvar isCSSFunction = (value)=>{\n    return typeof value === \"string\" && value.includes(\"(\") && value.includes(\")\");\n};\nvar gradientTransform = (value, theme)=>parseGradient(value, theme != null ? theme : {});\n// src/utils/transform-functions.ts\nfunction isCssVar(value) {\n    return /^var\\(--.+\\)$/.test(value);\n}\nvar analyzeCSSValue = (value)=>{\n    const num = parseFloat(value.toString());\n    const unit = value.toString().replace(String(num), \"\");\n    return {\n        unitless: !unit,\n        value: num,\n        unit\n    };\n};\nvar wrap = (str)=>(value)=>`${str}(${value})`;\nvar transformFunctions = {\n    filter (value) {\n        return value !== \"auto\" ? value : filterTemplate;\n    },\n    backdropFilter (value) {\n        return value !== \"auto\" ? value : backdropFilterTemplate;\n    },\n    ring (value) {\n        return getRingTemplate(transformFunctions.px(value));\n    },\n    bgClip (value) {\n        return value === \"text\" ? {\n            color: \"transparent\",\n            backgroundClip: \"text\"\n        } : {\n            backgroundClip: value\n        };\n    },\n    transform (value) {\n        if (value === \"auto\") return getTransformTemplate();\n        if (value === \"auto-gpu\") return getTransformGpuTemplate();\n        return value;\n    },\n    vh (value) {\n        return value === \"$100vh\" ? \"var(--chakra-vh)\" : value;\n    },\n    px (value) {\n        if (value == null) return value;\n        const { unitless } = analyzeCSSValue(value);\n        return unitless || typeof value === \"number\" ? `${value}px` : value;\n    },\n    fraction (value) {\n        return !(typeof value === \"number\") || value > 1 ? value : `${value * 100}%`;\n    },\n    float (value, theme) {\n        const map = {\n            left: \"right\",\n            right: \"left\"\n        };\n        return theme.direction === \"rtl\" ? map[value] : value;\n    },\n    degree (value) {\n        if (isCssVar(value) || value == null) return value;\n        const unitless = typeof value === \"string\" && !value.endsWith(\"deg\");\n        return typeof value === \"number\" || unitless ? `${value}deg` : value;\n    },\n    gradient: gradientTransform,\n    blur: wrap(\"blur\"),\n    opacity: wrap(\"opacity\"),\n    brightness: wrap(\"brightness\"),\n    contrast: wrap(\"contrast\"),\n    dropShadow: wrap(\"drop-shadow\"),\n    grayscale: wrap(\"grayscale\"),\n    hueRotate: (value)=>wrap(\"hue-rotate\")(transformFunctions.degree(value)),\n    invert: wrap(\"invert\"),\n    saturate: wrap(\"saturate\"),\n    sepia: wrap(\"sepia\"),\n    bgImage (value) {\n        if (value == null) return value;\n        const prevent = isCSSFunction(value) || globalSet.has(value);\n        return !prevent ? `url(${value})` : value;\n    },\n    outline (value) {\n        const isNoneOrZero = String(value) === \"0\" || String(value) === \"none\";\n        return value !== null && isNoneOrZero ? {\n            outline: \"2px solid transparent\",\n            outlineOffset: \"2px\"\n        } : {\n            outline: value\n        };\n    },\n    flexDirection (value) {\n        var _a;\n        const { space: space2, divide: divide2 } = (_a = flexDirectionTemplate[value]) != null ? _a : {};\n        const result = {\n            flexDirection: value\n        };\n        if (space2) result[space2] = 1;\n        if (divide2) result[divide2] = 1;\n        return result;\n    }\n};\n// src/utils/index.ts\nvar t = {\n    borderWidths: toConfig(\"borderWidths\"),\n    borderStyles: toConfig(\"borderStyles\"),\n    colors: toConfig(\"colors\"),\n    borders: toConfig(\"borders\"),\n    gradients: toConfig(\"gradients\", transformFunctions.gradient),\n    radii: toConfig(\"radii\", transformFunctions.px),\n    space: toConfig(\"space\", pipe(transformFunctions.vh, transformFunctions.px)),\n    spaceT: toConfig(\"space\", pipe(transformFunctions.vh, transformFunctions.px)),\n    degreeT (property) {\n        return {\n            property,\n            transform: transformFunctions.degree\n        };\n    },\n    prop (property, scale, transform2) {\n        return {\n            property,\n            scale,\n            ...scale && {\n                transform: createTransform({\n                    scale,\n                    transform: transform2\n                })\n            }\n        };\n    },\n    propT (property, transform2) {\n        return {\n            property,\n            transform: transform2\n        };\n    },\n    sizes: toConfig(\"sizes\", pipe(transformFunctions.vh, transformFunctions.px)),\n    sizesT: toConfig(\"sizes\", pipe(transformFunctions.vh, transformFunctions.fraction)),\n    shadows: toConfig(\"shadows\"),\n    logical,\n    blur: toConfig(\"blur\", transformFunctions.blur)\n};\n// src/config/background.ts\nvar background = {\n    background: t.colors(\"background\"),\n    backgroundColor: t.colors(\"backgroundColor\"),\n    backgroundImage: t.gradients(\"backgroundImage\"),\n    backgroundSize: true,\n    backgroundPosition: true,\n    backgroundRepeat: true,\n    backgroundAttachment: true,\n    backgroundClip: {\n        transform: transformFunctions.bgClip\n    },\n    bgSize: t.prop(\"backgroundSize\"),\n    bgPosition: t.prop(\"backgroundPosition\"),\n    bg: t.colors(\"background\"),\n    bgColor: t.colors(\"backgroundColor\"),\n    bgPos: t.prop(\"backgroundPosition\"),\n    bgRepeat: t.prop(\"backgroundRepeat\"),\n    bgAttachment: t.prop(\"backgroundAttachment\"),\n    bgGradient: t.gradients(\"backgroundImage\"),\n    bgClip: {\n        transform: transformFunctions.bgClip\n    }\n};\nObject.assign(background, {\n    bgImage: background.backgroundImage,\n    bgImg: background.backgroundImage\n});\n// src/config/border.ts\nvar border = {\n    border: t.borders(\"border\"),\n    borderWidth: t.borderWidths(\"borderWidth\"),\n    borderStyle: t.borderStyles(\"borderStyle\"),\n    borderColor: t.colors(\"borderColor\"),\n    borderRadius: t.radii(\"borderRadius\"),\n    borderTop: t.borders(\"borderTop\"),\n    borderBlockStart: t.borders(\"borderBlockStart\"),\n    borderTopLeftRadius: t.radii(\"borderTopLeftRadius\"),\n    borderStartStartRadius: t.logical({\n        scale: \"radii\",\n        property: {\n            ltr: \"borderTopLeftRadius\",\n            rtl: \"borderTopRightRadius\"\n        }\n    }),\n    borderEndStartRadius: t.logical({\n        scale: \"radii\",\n        property: {\n            ltr: \"borderBottomLeftRadius\",\n            rtl: \"borderBottomRightRadius\"\n        }\n    }),\n    borderTopRightRadius: t.radii(\"borderTopRightRadius\"),\n    borderStartEndRadius: t.logical({\n        scale: \"radii\",\n        property: {\n            ltr: \"borderTopRightRadius\",\n            rtl: \"borderTopLeftRadius\"\n        }\n    }),\n    borderEndEndRadius: t.logical({\n        scale: \"radii\",\n        property: {\n            ltr: \"borderBottomRightRadius\",\n            rtl: \"borderBottomLeftRadius\"\n        }\n    }),\n    borderRight: t.borders(\"borderRight\"),\n    borderInlineEnd: t.borders(\"borderInlineEnd\"),\n    borderBottom: t.borders(\"borderBottom\"),\n    borderBlockEnd: t.borders(\"borderBlockEnd\"),\n    borderBottomLeftRadius: t.radii(\"borderBottomLeftRadius\"),\n    borderBottomRightRadius: t.radii(\"borderBottomRightRadius\"),\n    borderLeft: t.borders(\"borderLeft\"),\n    borderInlineStart: {\n        property: \"borderInlineStart\",\n        scale: \"borders\"\n    },\n    borderInlineStartRadius: t.logical({\n        scale: \"radii\",\n        property: {\n            ltr: [\n                \"borderTopLeftRadius\",\n                \"borderBottomLeftRadius\"\n            ],\n            rtl: [\n                \"borderTopRightRadius\",\n                \"borderBottomRightRadius\"\n            ]\n        }\n    }),\n    borderInlineEndRadius: t.logical({\n        scale: \"radii\",\n        property: {\n            ltr: [\n                \"borderTopRightRadius\",\n                \"borderBottomRightRadius\"\n            ],\n            rtl: [\n                \"borderTopLeftRadius\",\n                \"borderBottomLeftRadius\"\n            ]\n        }\n    }),\n    borderX: t.borders([\n        \"borderLeft\",\n        \"borderRight\"\n    ]),\n    borderInline: t.borders(\"borderInline\"),\n    borderY: t.borders([\n        \"borderTop\",\n        \"borderBottom\"\n    ]),\n    borderBlock: t.borders(\"borderBlock\"),\n    borderTopWidth: t.borderWidths(\"borderTopWidth\"),\n    borderBlockStartWidth: t.borderWidths(\"borderBlockStartWidth\"),\n    borderTopColor: t.colors(\"borderTopColor\"),\n    borderBlockStartColor: t.colors(\"borderBlockStartColor\"),\n    borderTopStyle: t.borderStyles(\"borderTopStyle\"),\n    borderBlockStartStyle: t.borderStyles(\"borderBlockStartStyle\"),\n    borderBottomWidth: t.borderWidths(\"borderBottomWidth\"),\n    borderBlockEndWidth: t.borderWidths(\"borderBlockEndWidth\"),\n    borderBottomColor: t.colors(\"borderBottomColor\"),\n    borderBlockEndColor: t.colors(\"borderBlockEndColor\"),\n    borderBottomStyle: t.borderStyles(\"borderBottomStyle\"),\n    borderBlockEndStyle: t.borderStyles(\"borderBlockEndStyle\"),\n    borderLeftWidth: t.borderWidths(\"borderLeftWidth\"),\n    borderInlineStartWidth: t.borderWidths(\"borderInlineStartWidth\"),\n    borderLeftColor: t.colors(\"borderLeftColor\"),\n    borderInlineStartColor: t.colors(\"borderInlineStartColor\"),\n    borderLeftStyle: t.borderStyles(\"borderLeftStyle\"),\n    borderInlineStartStyle: t.borderStyles(\"borderInlineStartStyle\"),\n    borderRightWidth: t.borderWidths(\"borderRightWidth\"),\n    borderInlineEndWidth: t.borderWidths(\"borderInlineEndWidth\"),\n    borderRightColor: t.colors(\"borderRightColor\"),\n    borderInlineEndColor: t.colors(\"borderInlineEndColor\"),\n    borderRightStyle: t.borderStyles(\"borderRightStyle\"),\n    borderInlineEndStyle: t.borderStyles(\"borderInlineEndStyle\"),\n    borderTopRadius: t.radii([\n        \"borderTopLeftRadius\",\n        \"borderTopRightRadius\"\n    ]),\n    borderBottomRadius: t.radii([\n        \"borderBottomLeftRadius\",\n        \"borderBottomRightRadius\"\n    ]),\n    borderLeftRadius: t.radii([\n        \"borderTopLeftRadius\",\n        \"borderBottomLeftRadius\"\n    ]),\n    borderRightRadius: t.radii([\n        \"borderTopRightRadius\",\n        \"borderBottomRightRadius\"\n    ])\n};\nObject.assign(border, {\n    rounded: border.borderRadius,\n    roundedTop: border.borderTopRadius,\n    roundedTopLeft: border.borderTopLeftRadius,\n    roundedTopRight: border.borderTopRightRadius,\n    roundedTopStart: border.borderStartStartRadius,\n    roundedTopEnd: border.borderStartEndRadius,\n    roundedBottom: border.borderBottomRadius,\n    roundedBottomLeft: border.borderBottomLeftRadius,\n    roundedBottomRight: border.borderBottomRightRadius,\n    roundedBottomStart: border.borderEndStartRadius,\n    roundedBottomEnd: border.borderEndEndRadius,\n    roundedLeft: border.borderLeftRadius,\n    roundedRight: border.borderRightRadius,\n    roundedStart: border.borderInlineStartRadius,\n    roundedEnd: border.borderInlineEndRadius,\n    borderStart: border.borderInlineStart,\n    borderEnd: border.borderInlineEnd,\n    borderTopStartRadius: border.borderStartStartRadius,\n    borderTopEndRadius: border.borderStartEndRadius,\n    borderBottomStartRadius: border.borderEndStartRadius,\n    borderBottomEndRadius: border.borderEndEndRadius,\n    borderStartRadius: border.borderInlineStartRadius,\n    borderEndRadius: border.borderInlineEndRadius,\n    borderStartWidth: border.borderInlineStartWidth,\n    borderEndWidth: border.borderInlineEndWidth,\n    borderStartColor: border.borderInlineStartColor,\n    borderEndColor: border.borderInlineEndColor,\n    borderStartStyle: border.borderInlineStartStyle,\n    borderEndStyle: border.borderInlineEndStyle\n});\n// src/config/color.ts\nvar color = {\n    color: t.colors(\"color\"),\n    textColor: t.colors(\"color\"),\n    fill: t.colors(\"fill\"),\n    stroke: t.colors(\"stroke\")\n};\n// src/config/effect.ts\nvar effect = {\n    boxShadow: t.shadows(\"boxShadow\"),\n    mixBlendMode: true,\n    blendMode: t.prop(\"mixBlendMode\"),\n    backgroundBlendMode: true,\n    bgBlendMode: t.prop(\"backgroundBlendMode\"),\n    opacity: true\n};\nObject.assign(effect, {\n    shadow: effect.boxShadow\n});\n// src/config/filter.ts\nvar filter = {\n    filter: {\n        transform: transformFunctions.filter\n    },\n    blur: t.blur(\"--chakra-blur\"),\n    brightness: t.propT(\"--chakra-brightness\", transformFunctions.brightness),\n    contrast: t.propT(\"--chakra-contrast\", transformFunctions.contrast),\n    hueRotate: t.propT(\"--chakra-hue-rotate\", transformFunctions.hueRotate),\n    invert: t.propT(\"--chakra-invert\", transformFunctions.invert),\n    saturate: t.propT(\"--chakra-saturate\", transformFunctions.saturate),\n    dropShadow: t.propT(\"--chakra-drop-shadow\", transformFunctions.dropShadow),\n    backdropFilter: {\n        transform: transformFunctions.backdropFilter\n    },\n    backdropBlur: t.blur(\"--chakra-backdrop-blur\"),\n    backdropBrightness: t.propT(\"--chakra-backdrop-brightness\", transformFunctions.brightness),\n    backdropContrast: t.propT(\"--chakra-backdrop-contrast\", transformFunctions.contrast),\n    backdropHueRotate: t.propT(\"--chakra-backdrop-hue-rotate\", transformFunctions.hueRotate),\n    backdropInvert: t.propT(\"--chakra-backdrop-invert\", transformFunctions.invert),\n    backdropSaturate: t.propT(\"--chakra-backdrop-saturate\", transformFunctions.saturate)\n};\n// src/config/flexbox.ts\nvar flexbox = {\n    alignItems: true,\n    alignContent: true,\n    justifyItems: true,\n    justifyContent: true,\n    flexWrap: true,\n    flexDirection: {\n        transform: transformFunctions.flexDirection\n    },\n    flex: true,\n    flexFlow: true,\n    flexGrow: true,\n    flexShrink: true,\n    flexBasis: t.sizes(\"flexBasis\"),\n    justifySelf: true,\n    alignSelf: true,\n    order: true,\n    placeItems: true,\n    placeContent: true,\n    placeSelf: true,\n    gap: t.space(\"gap\"),\n    rowGap: t.space(\"rowGap\"),\n    columnGap: t.space(\"columnGap\")\n};\nObject.assign(flexbox, {\n    flexDir: flexbox.flexDirection\n});\n// src/config/grid.ts\nvar grid = {\n    gridGap: t.space(\"gridGap\"),\n    gridColumnGap: t.space(\"gridColumnGap\"),\n    gridRowGap: t.space(\"gridRowGap\"),\n    gridColumn: true,\n    gridRow: true,\n    gridAutoFlow: true,\n    gridAutoColumns: true,\n    gridColumnStart: true,\n    gridColumnEnd: true,\n    gridRowStart: true,\n    gridRowEnd: true,\n    gridAutoRows: true,\n    gridTemplate: true,\n    gridTemplateColumns: true,\n    gridTemplateRows: true,\n    gridTemplateAreas: true,\n    gridArea: true\n};\n// src/config/interactivity.ts\nvar interactivity = {\n    appearance: true,\n    cursor: true,\n    resize: true,\n    userSelect: true,\n    pointerEvents: true,\n    outline: {\n        transform: transformFunctions.outline\n    },\n    outlineOffset: true,\n    outlineColor: t.colors(\"outlineColor\")\n};\n// src/config/layout.ts\nvar layout = {\n    width: t.sizesT(\"width\"),\n    inlineSize: t.sizesT(\"inlineSize\"),\n    height: t.sizes(\"height\"),\n    blockSize: t.sizes(\"blockSize\"),\n    boxSize: t.sizes([\n        \"width\",\n        \"height\"\n    ]),\n    minWidth: t.sizes(\"minWidth\"),\n    minInlineSize: t.sizes(\"minInlineSize\"),\n    minHeight: t.sizes(\"minHeight\"),\n    minBlockSize: t.sizes(\"minBlockSize\"),\n    maxWidth: t.sizes(\"maxWidth\"),\n    maxInlineSize: t.sizes(\"maxInlineSize\"),\n    maxHeight: t.sizes(\"maxHeight\"),\n    maxBlockSize: t.sizes(\"maxBlockSize\"),\n    overflow: true,\n    overflowX: true,\n    overflowY: true,\n    overscrollBehavior: true,\n    overscrollBehaviorX: true,\n    overscrollBehaviorY: true,\n    display: true,\n    aspectRatio: true,\n    hideFrom: {\n        scale: \"breakpoints\",\n        transform: (value, theme)=>{\n            var _a, _b, _c;\n            const breakpoint = (_c = (_b = (_a = theme.__breakpoints) == null ? void 0 : _a.get(value)) == null ? void 0 : _b.minW) != null ? _c : value;\n            const mq = `@media screen and (min-width: ${breakpoint})`;\n            return {\n                [mq]: {\n                    display: \"none\"\n                }\n            };\n        }\n    },\n    hideBelow: {\n        scale: \"breakpoints\",\n        transform: (value, theme)=>{\n            var _a, _b, _c;\n            const breakpoint = (_c = (_b = (_a = theme.__breakpoints) == null ? void 0 : _a.get(value)) == null ? void 0 : _b._minW) != null ? _c : value;\n            const mq = `@media screen and (max-width: ${breakpoint})`;\n            return {\n                [mq]: {\n                    display: \"none\"\n                }\n            };\n        }\n    },\n    verticalAlign: true,\n    boxSizing: true,\n    boxDecorationBreak: true,\n    float: t.propT(\"float\", transformFunctions.float),\n    objectFit: true,\n    objectPosition: true,\n    visibility: true,\n    isolation: true\n};\nObject.assign(layout, {\n    w: layout.width,\n    h: layout.height,\n    minW: layout.minWidth,\n    maxW: layout.maxWidth,\n    minH: layout.minHeight,\n    maxH: layout.maxHeight,\n    overscroll: layout.overscrollBehavior,\n    overscrollX: layout.overscrollBehaviorX,\n    overscrollY: layout.overscrollBehaviorY\n});\n// src/config/list.ts\nvar list = {\n    listStyleType: true,\n    listStylePosition: true,\n    listStylePos: t.prop(\"listStylePosition\"),\n    listStyleImage: true,\n    listStyleImg: t.prop(\"listStyleImage\")\n};\n// src/get.ts\nfunction get(obj, path, fallback, index) {\n    const key = typeof path === \"string\" ? path.split(\".\") : [\n        path\n    ];\n    for(index = 0; index < key.length; index += 1){\n        if (!obj) break;\n        obj = obj[key[index]];\n    }\n    return obj === void 0 ? fallback : obj;\n}\nvar memoize = (fn)=>{\n    const cache = /* @__PURE__ */ new WeakMap();\n    const memoizedFn = (obj, path, fallback, index)=>{\n        if (typeof obj === \"undefined\") {\n            return fn(obj, path, fallback);\n        }\n        if (!cache.has(obj)) {\n            cache.set(obj, /* @__PURE__ */ new Map());\n        }\n        const map = cache.get(obj);\n        if (map.has(path)) {\n            return map.get(path);\n        }\n        const value = fn(obj, path, fallback, index);\n        map.set(path, value);\n        return value;\n    };\n    return memoizedFn;\n};\nvar memoizedGet = memoize(get);\n// src/config/others.ts\nvar srOnly = {\n    border: \"0px\",\n    clip: \"rect(0, 0, 0, 0)\",\n    width: \"1px\",\n    height: \"1px\",\n    margin: \"-1px\",\n    padding: \"0px\",\n    overflow: \"hidden\",\n    whiteSpace: \"nowrap\",\n    position: \"absolute\"\n};\nvar srFocusable = {\n    position: \"static\",\n    width: \"auto\",\n    height: \"auto\",\n    clip: \"auto\",\n    padding: \"0\",\n    margin: \"0\",\n    overflow: \"visible\",\n    whiteSpace: \"normal\"\n};\nvar getWithPriority = (theme, key, styles)=>{\n    const result = {};\n    const obj = memoizedGet(theme, key, {});\n    for(const prop in obj){\n        const isInStyles = prop in styles && styles[prop] != null;\n        if (!isInStyles) result[prop] = obj[prop];\n    }\n    return result;\n};\nvar others = {\n    srOnly: {\n        transform (value) {\n            if (value === true) return srOnly;\n            if (value === \"focusable\") return srFocusable;\n            return {};\n        }\n    },\n    layerStyle: {\n        processResult: true,\n        transform: (value, theme, styles)=>getWithPriority(theme, `layerStyles.${value}`, styles)\n    },\n    textStyle: {\n        processResult: true,\n        transform: (value, theme, styles)=>getWithPriority(theme, `textStyles.${value}`, styles)\n    },\n    apply: {\n        processResult: true,\n        transform: (value, theme, styles)=>getWithPriority(theme, value, styles)\n    }\n};\n// src/config/position.ts\nvar position = {\n    position: true,\n    pos: t.prop(\"position\"),\n    zIndex: t.prop(\"zIndex\", \"zIndices\"),\n    inset: t.spaceT(\"inset\"),\n    insetX: t.spaceT([\n        \"left\",\n        \"right\"\n    ]),\n    insetInline: t.spaceT(\"insetInline\"),\n    insetY: t.spaceT([\n        \"top\",\n        \"bottom\"\n    ]),\n    insetBlock: t.spaceT(\"insetBlock\"),\n    top: t.spaceT(\"top\"),\n    insetBlockStart: t.spaceT(\"insetBlockStart\"),\n    bottom: t.spaceT(\"bottom\"),\n    insetBlockEnd: t.spaceT(\"insetBlockEnd\"),\n    left: t.spaceT(\"left\"),\n    insetInlineStart: t.logical({\n        scale: \"space\",\n        property: {\n            ltr: \"left\",\n            rtl: \"right\"\n        }\n    }),\n    right: t.spaceT(\"right\"),\n    insetInlineEnd: t.logical({\n        scale: \"space\",\n        property: {\n            ltr: \"right\",\n            rtl: \"left\"\n        }\n    })\n};\nObject.assign(position, {\n    insetStart: position.insetInlineStart,\n    insetEnd: position.insetInlineEnd\n});\n// src/config/ring.ts\nvar ring = {\n    ring: {\n        transform: transformFunctions.ring\n    },\n    ringColor: t.colors(\"--chakra-ring-color\"),\n    ringOffset: t.prop(\"--chakra-ring-offset-width\"),\n    ringOffsetColor: t.colors(\"--chakra-ring-offset-color\"),\n    ringInset: t.prop(\"--chakra-ring-inset\")\n};\n// src/config/space.ts\nvar space = {\n    margin: t.spaceT(\"margin\"),\n    marginTop: t.spaceT(\"marginTop\"),\n    marginBlockStart: t.spaceT(\"marginBlockStart\"),\n    marginRight: t.spaceT(\"marginRight\"),\n    marginInlineEnd: t.spaceT(\"marginInlineEnd\"),\n    marginBottom: t.spaceT(\"marginBottom\"),\n    marginBlockEnd: t.spaceT(\"marginBlockEnd\"),\n    marginLeft: t.spaceT(\"marginLeft\"),\n    marginInlineStart: t.spaceT(\"marginInlineStart\"),\n    marginX: t.spaceT([\n        \"marginInlineStart\",\n        \"marginInlineEnd\"\n    ]),\n    marginInline: t.spaceT(\"marginInline\"),\n    marginY: t.spaceT([\n        \"marginTop\",\n        \"marginBottom\"\n    ]),\n    marginBlock: t.spaceT(\"marginBlock\"),\n    padding: t.space(\"padding\"),\n    paddingTop: t.space(\"paddingTop\"),\n    paddingBlockStart: t.space(\"paddingBlockStart\"),\n    paddingRight: t.space(\"paddingRight\"),\n    paddingBottom: t.space(\"paddingBottom\"),\n    paddingBlockEnd: t.space(\"paddingBlockEnd\"),\n    paddingLeft: t.space(\"paddingLeft\"),\n    paddingInlineStart: t.space(\"paddingInlineStart\"),\n    paddingInlineEnd: t.space(\"paddingInlineEnd\"),\n    paddingX: t.space([\n        \"paddingInlineStart\",\n        \"paddingInlineEnd\"\n    ]),\n    paddingInline: t.space(\"paddingInline\"),\n    paddingY: t.space([\n        \"paddingTop\",\n        \"paddingBottom\"\n    ]),\n    paddingBlock: t.space(\"paddingBlock\")\n};\nObject.assign(space, {\n    m: space.margin,\n    mt: space.marginTop,\n    mr: space.marginRight,\n    me: space.marginInlineEnd,\n    marginEnd: space.marginInlineEnd,\n    mb: space.marginBottom,\n    ml: space.marginLeft,\n    ms: space.marginInlineStart,\n    marginStart: space.marginInlineStart,\n    mx: space.marginX,\n    my: space.marginY,\n    p: space.padding,\n    pt: space.paddingTop,\n    py: space.paddingY,\n    px: space.paddingX,\n    pb: space.paddingBottom,\n    pl: space.paddingLeft,\n    ps: space.paddingInlineStart,\n    paddingStart: space.paddingInlineStart,\n    pr: space.paddingRight,\n    pe: space.paddingInlineEnd,\n    paddingEnd: space.paddingInlineEnd\n});\n// src/config/text-decoration.ts\nvar textDecoration = {\n    textDecorationColor: t.colors(\"textDecorationColor\"),\n    textDecoration: true,\n    textDecor: {\n        property: \"textDecoration\"\n    },\n    textDecorationLine: true,\n    textDecorationStyle: true,\n    textDecorationThickness: true,\n    textUnderlineOffset: true,\n    textShadow: t.shadows(\"textShadow\")\n};\n// src/config/transform.ts\nvar transform = {\n    clipPath: true,\n    transform: t.propT(\"transform\", transformFunctions.transform),\n    transformOrigin: true,\n    translateX: t.spaceT(\"--chakra-translate-x\"),\n    translateY: t.spaceT(\"--chakra-translate-y\"),\n    skewX: t.degreeT(\"--chakra-skew-x\"),\n    skewY: t.degreeT(\"--chakra-skew-y\"),\n    scaleX: t.prop(\"--chakra-scale-x\"),\n    scaleY: t.prop(\"--chakra-scale-y\"),\n    scale: t.prop([\n        \"--chakra-scale-x\",\n        \"--chakra-scale-y\"\n    ]),\n    rotate: t.degreeT(\"--chakra-rotate\")\n};\n// src/config/transition.ts\nvar transition = {\n    transition: true,\n    transitionDelay: true,\n    animation: true,\n    willChange: true,\n    transitionDuration: t.prop(\"transitionDuration\", \"transition.duration\"),\n    transitionProperty: t.prop(\"transitionProperty\", \"transition.property\"),\n    transitionTimingFunction: t.prop(\"transitionTimingFunction\", \"transition.easing\")\n};\n// src/config/typography.ts\nvar typography = {\n    fontFamily: t.prop(\"fontFamily\", \"fonts\"),\n    fontSize: t.prop(\"fontSize\", \"fontSizes\", transformFunctions.px),\n    fontWeight: t.prop(\"fontWeight\", \"fontWeights\"),\n    lineHeight: t.prop(\"lineHeight\", \"lineHeights\"),\n    letterSpacing: t.prop(\"letterSpacing\", \"letterSpacings\"),\n    textAlign: true,\n    fontStyle: true,\n    textIndent: true,\n    wordBreak: true,\n    overflowWrap: true,\n    textOverflow: true,\n    textTransform: true,\n    whiteSpace: true,\n    isTruncated: {\n        transform (value) {\n            if (value === true) {\n                return {\n                    overflow: \"hidden\",\n                    textOverflow: \"ellipsis\",\n                    whiteSpace: \"nowrap\"\n                };\n            }\n        }\n    },\n    noOfLines: {\n        static: {\n            overflow: \"hidden\",\n            textOverflow: \"ellipsis\",\n            display: \"-webkit-box\",\n            WebkitBoxOrient: \"vertical\",\n            //@ts-ignore\n            WebkitLineClamp: \"var(--chakra-line-clamp)\"\n        },\n        property: \"--chakra-line-clamp\"\n    }\n};\n// src/config/scroll.ts\nvar scroll = {\n    scrollBehavior: true,\n    scrollSnapAlign: true,\n    scrollSnapStop: true,\n    scrollSnapType: true,\n    // scroll margin\n    scrollMargin: t.spaceT(\"scrollMargin\"),\n    scrollMarginTop: t.spaceT(\"scrollMarginTop\"),\n    scrollMarginBottom: t.spaceT(\"scrollMarginBottom\"),\n    scrollMarginLeft: t.spaceT(\"scrollMarginLeft\"),\n    scrollMarginRight: t.spaceT(\"scrollMarginRight\"),\n    scrollMarginX: t.spaceT([\n        \"scrollMarginLeft\",\n        \"scrollMarginRight\"\n    ]),\n    scrollMarginY: t.spaceT([\n        \"scrollMarginTop\",\n        \"scrollMarginBottom\"\n    ]),\n    // scroll padding\n    scrollPadding: t.spaceT(\"scrollPadding\"),\n    scrollPaddingTop: t.spaceT(\"scrollPaddingTop\"),\n    scrollPaddingBottom: t.spaceT(\"scrollPaddingBottom\"),\n    scrollPaddingLeft: t.spaceT(\"scrollPaddingLeft\"),\n    scrollPaddingRight: t.spaceT(\"scrollPaddingRight\"),\n    scrollPaddingX: t.spaceT([\n        \"scrollPaddingLeft\",\n        \"scrollPaddingRight\"\n    ]),\n    scrollPaddingY: t.spaceT([\n        \"scrollPaddingTop\",\n        \"scrollPaddingBottom\"\n    ])\n};\n// src/create-theme-vars/calc.ts\n\nfunction resolveReference(operand) {\n    if ((0,_chakra_ui_shared_utils__WEBPACK_IMPORTED_MODULE_0__.isObject)(operand) && operand.reference) {\n        return operand.reference;\n    }\n    return String(operand);\n}\nvar toExpression = (operator, ...operands)=>operands.map(resolveReference).join(` ${operator} `).replace(/calc/g, \"\");\nvar add = (...operands)=>`calc(${toExpression(\"+\", ...operands)})`;\nvar subtract = (...operands)=>`calc(${toExpression(\"-\", ...operands)})`;\nvar multiply = (...operands)=>`calc(${toExpression(\"*\", ...operands)})`;\nvar divide = (...operands)=>`calc(${toExpression(\"/\", ...operands)})`;\nvar negate = (x)=>{\n    const value = resolveReference(x);\n    if (value != null && !Number.isNaN(parseFloat(value))) {\n        return String(value).startsWith(\"-\") ? String(value).slice(1) : `-${value}`;\n    }\n    return multiply(value, -1);\n};\nvar calc = Object.assign((x)=>({\n        add: (...operands)=>calc(add(x, ...operands)),\n        subtract: (...operands)=>calc(subtract(x, ...operands)),\n        multiply: (...operands)=>calc(multiply(x, ...operands)),\n        divide: (...operands)=>calc(divide(x, ...operands)),\n        negate: ()=>calc(negate(x)),\n        toString: ()=>x.toString()\n    }), {\n    add,\n    subtract,\n    multiply,\n    divide,\n    negate\n});\n// src/create-theme-vars/css-var.ts\nfunction replaceWhiteSpace(value, replaceValue = \"-\") {\n    return value.replace(/\\s+/g, replaceValue);\n}\nfunction escape(value) {\n    const valueStr = replaceWhiteSpace(value.toString());\n    return escapeSymbol(escapeDot(valueStr));\n}\nfunction escapeDot(value) {\n    if (value.includes(\"\\\\.\")) return value;\n    const isDecimal = !Number.isInteger(parseFloat(value.toString()));\n    return isDecimal ? value.replace(\".\", `\\\\.`) : value;\n}\nfunction escapeSymbol(value) {\n    return value.replace(/[!-,/:-@[-^`{-~]/g, \"\\\\$&\");\n}\nfunction addPrefix(value, prefix = \"\") {\n    return [\n        prefix,\n        value\n    ].filter(Boolean).join(\"-\");\n}\nfunction toVarReference(name, fallback) {\n    return `var(${name}${fallback ? `, ${fallback}` : \"\"})`;\n}\nfunction toVarDefinition(value, prefix = \"\") {\n    return escape(`--${addPrefix(value, prefix)}`);\n}\nfunction cssVar(name, fallback, cssVarPrefix) {\n    const cssVariable = toVarDefinition(name, cssVarPrefix);\n    return {\n        variable: cssVariable,\n        reference: toVarReference(cssVariable, fallback)\n    };\n}\nfunction defineCssVars(scope, keys2) {\n    const vars = {};\n    for (const key of keys2){\n        if (Array.isArray(key)) {\n            const [name, fallback] = key;\n            vars[name] = cssVar(`${scope}-${name}`, fallback);\n            continue;\n        }\n        vars[key] = cssVar(`${scope}-${key}`);\n    }\n    return vars;\n}\n// ../../utilities/breakpoint-utils/src/breakpoint.ts\n\nfunction getLastItem(array) {\n    const length = array == null ? 0 : array.length;\n    return length ? array[length - 1] : void 0;\n}\nfunction analyzeCSSValue2(value) {\n    const num = parseFloat(value.toString());\n    const unit = value.toString().replace(String(num), \"\");\n    return {\n        unitless: !unit,\n        value: num,\n        unit\n    };\n}\nfunction px(value) {\n    if (value == null) return value;\n    const { unitless } = analyzeCSSValue2(value);\n    return unitless || typeof value === \"number\" ? `${value}px` : value;\n}\nvar sortByBreakpointValue = (a, b)=>parseInt(a[1], 10) > parseInt(b[1], 10) ? 1 : -1;\nvar sortBps = (breakpoints)=>Object.fromEntries(Object.entries(breakpoints).sort(sortByBreakpointValue));\nfunction normalize(breakpoints) {\n    const sorted = sortBps(breakpoints);\n    return Object.assign(Object.values(sorted), sorted);\n}\nfunction keys(breakpoints) {\n    const value = Object.keys(sortBps(breakpoints));\n    return new Set(value);\n}\nfunction subtract2(value) {\n    var _a;\n    if (!value) return value;\n    value = (_a = px(value)) != null ? _a : value;\n    const OFFSET = -0.02;\n    return typeof value === \"number\" ? `${value + OFFSET}` : value.replace(/(\\d+\\.?\\d*)/u, (m)=>`${parseFloat(m) + OFFSET}`);\n}\nfunction toMediaQueryString(min, max) {\n    const query = [\n        \"@media screen\"\n    ];\n    if (min) query.push(\"and\", `(min-width: ${px(min)})`);\n    if (max) query.push(\"and\", `(max-width: ${px(max)})`);\n    return query.join(\" \");\n}\nfunction analyzeBreakpoints(breakpoints) {\n    var _a;\n    if (!breakpoints) return null;\n    breakpoints.base = (_a = breakpoints.base) != null ? _a : \"0px\";\n    const normalized = normalize(breakpoints);\n    const queries = Object.entries(breakpoints).sort(sortByBreakpointValue).map(([breakpoint, minW], index, entry)=>{\n        var _a2;\n        let [, maxW] = (_a2 = entry[index + 1]) != null ? _a2 : [];\n        maxW = parseFloat(maxW) > 0 ? subtract2(maxW) : void 0;\n        return {\n            _minW: subtract2(minW),\n            breakpoint,\n            minW,\n            maxW,\n            maxWQuery: toMediaQueryString(null, maxW),\n            minWQuery: toMediaQueryString(minW),\n            minMaxQuery: toMediaQueryString(minW, maxW)\n        };\n    });\n    const _keys = keys(breakpoints);\n    const _keysArr = Array.from(_keys.values());\n    return {\n        keys: _keys,\n        normalized,\n        isResponsive (test) {\n            const keys2 = Object.keys(test);\n            return keys2.length > 0 && keys2.every((key)=>_keys.has(key));\n        },\n        asObject: sortBps(breakpoints),\n        asArray: normalize(breakpoints),\n        details: queries,\n        get (key) {\n            return queries.find((q)=>q.breakpoint === key);\n        },\n        media: [\n            null,\n            ...normalized.map((minW)=>toMediaQueryString(minW)).slice(1)\n        ],\n        /**\n     * Converts the object responsive syntax to array syntax\n     *\n     * @example\n     * toArrayValue({ base: 1, sm: 2, md: 3 }) // => [1, 2, 3]\n     */ toArrayValue (test) {\n            if (!(0,_chakra_ui_shared_utils__WEBPACK_IMPORTED_MODULE_0__.isObject)(test)) {\n                throw new Error(\"toArrayValue: value must be an object\");\n            }\n            const result = _keysArr.map((bp)=>{\n                var _a2;\n                return (_a2 = test[bp]) != null ? _a2 : null;\n            });\n            while(getLastItem(result) === null){\n                result.pop();\n            }\n            return result;\n        },\n        /**\n     * Converts the array responsive syntax to object syntax\n     *\n     * @example\n     * toObjectValue([1, 2, 3]) // => { base: 1, sm: 2, md: 3 }\n     */ toObjectValue (test) {\n            if (!Array.isArray(test)) {\n                throw new Error(\"toObjectValue: value must be an array\");\n            }\n            return test.reduce((acc, value, index)=>{\n                const key = _keysArr[index];\n                if (key != null && value != null) acc[key] = value;\n                return acc;\n            }, {});\n        }\n    };\n}\n// src/create-theme-vars/create-theme-vars.ts\n\n// src/pseudos.ts\nvar state = {\n    hover: (str, post)=>`${str}:hover ${post}, ${str}[data-hover] ${post}`,\n    focus: (str, post)=>`${str}:focus ${post}, ${str}[data-focus] ${post}`,\n    focusVisible: (str, post)=>`${str}:focus-visible ${post}`,\n    focusWithin: (str, post)=>`${str}:focus-within ${post}`,\n    active: (str, post)=>`${str}:active ${post}, ${str}[data-active] ${post}`,\n    disabled: (str, post)=>`${str}:disabled ${post}, ${str}[data-disabled] ${post}`,\n    invalid: (str, post)=>`${str}:invalid ${post}, ${str}[data-invalid] ${post}`,\n    checked: (str, post)=>`${str}:checked ${post}, ${str}[data-checked] ${post}`,\n    indeterminate: (str, post)=>`${str}:indeterminate ${post}, ${str}[aria-checked=mixed] ${post}, ${str}[data-indeterminate] ${post}`,\n    readOnly: (str, post)=>`${str}:read-only ${post}, ${str}[readonly] ${post}, ${str}[data-read-only] ${post}`,\n    expanded: (str, post)=>`${str}:read-only ${post}, ${str}[aria-expanded=true] ${post}, ${str}[data-expanded] ${post}`,\n    placeholderShown: (str, post)=>`${str}:placeholder-shown ${post}`\n};\nvar toGroup = (fn)=>merge((v)=>fn(v, \"&\"), \"[role=group]\", \"[data-group]\", \".group\");\nvar toPeer = (fn)=>merge((v)=>fn(v, \"~ &\"), \"[data-peer]\", \".peer\");\nvar merge = (fn, ...selectors)=>selectors.map(fn).join(\", \");\nvar pseudoSelectors = {\n    /**\n   * Styles for CSS selector `&:hover`\n   */ _hover: \"&:hover, &[data-hover]\",\n    /**\n   * Styles for CSS Selector `&:active`\n   */ _active: \"&:active, &[data-active]\",\n    /**\n   * Styles for CSS selector `&:focus`\n   *\n   */ _focus: \"&:focus, &[data-focus]\",\n    /**\n   * Styles for the highlighted state.\n   */ _highlighted: \"&[data-highlighted]\",\n    /**\n   * Styles to apply when a child of this element has received focus\n   * - CSS Selector `&:focus-within`\n   */ _focusWithin: \"&:focus-within\",\n    /**\n   * Styles to apply when this element has received focus via tabbing\n   * - CSS Selector `&:focus-visible`\n   */ _focusVisible: \"&:focus-visible, &[data-focus-visible]\",\n    /**\n   * Styles to apply when this element is disabled. The passed styles are applied to these CSS selectors:\n   * - `&[aria-disabled=true]`\n   * - `&:disabled`\n   * - `&[data-disabled]`\n   * - `&[disabled]`\n   */ _disabled: \"&:disabled, &[disabled], &[aria-disabled=true], &[data-disabled]\",\n    /**\n   * Styles for CSS Selector `&:readonly`\n   */ _readOnly: \"&[aria-readonly=true], &[readonly], &[data-readonly]\",\n    /**\n   * Styles for CSS selector `&::before`\n   *\n   * NOTE:When using this, ensure the `content` is wrapped in a backtick.\n   * @example\n   * ```jsx\n   * <Box _before={{content:`\"\"` }}/>\n   * ```\n   */ _before: \"&::before\",\n    /**\n   * Styles for CSS selector `&::after`\n   *\n   * NOTE:When using this, ensure the `content` is wrapped in a backtick.\n   * @example\n   * ```jsx\n   * <Box _after={{content:`\"\"` }}/>\n   * ```\n   */ _after: \"&::after\",\n    /**\n   * Styles for CSS selector `&:empty`\n   */ _empty: \"&:empty\",\n    /**\n   * Styles to apply when the ARIA attribute `aria-expanded` is `true`\n   * - CSS selector `&[aria-expanded=true]`\n   */ _expanded: \"&[aria-expanded=true], &[data-expanded]\",\n    /**\n   * Styles to apply when the ARIA attribute `aria-checked` is `true`\n   * - CSS selector `&[aria-checked=true]`\n   */ _checked: \"&[aria-checked=true], &[data-checked]\",\n    /**\n   * Styles to apply when the ARIA attribute `aria-grabbed` is `true`\n   * - CSS selector `&[aria-grabbed=true]`\n   */ _grabbed: \"&[aria-grabbed=true], &[data-grabbed]\",\n    /**\n   * Styles for CSS Selector `&[aria-pressed=true]`\n   * Typically used to style the current \"pressed\" state of toggle buttons\n   */ _pressed: \"&[aria-pressed=true], &[data-pressed]\",\n    /**\n   * Styles to apply when the ARIA attribute `aria-invalid` is `true`\n   * - CSS selector `&[aria-invalid=true]`\n   */ _invalid: \"&[aria-invalid=true], &[data-invalid]\",\n    /**\n   * Styles for the valid state\n   * - CSS selector `&[data-valid], &[data-state=valid]`\n   */ _valid: \"&[data-valid], &[data-state=valid]\",\n    /**\n   * Styles for CSS Selector `&[aria-busy=true]` or `&[data-loading=true]`.\n   * Useful for styling loading states\n   */ _loading: \"&[data-loading], &[aria-busy=true]\",\n    /**\n   * Styles to apply when the ARIA attribute `aria-selected` is `true`\n   *\n   * - CSS selector `&[aria-selected=true]`\n   */ _selected: \"&[aria-selected=true], &[data-selected]\",\n    /**\n   * Styles for CSS Selector `[hidden=true]`\n   */ _hidden: \"&[hidden], &[data-hidden]\",\n    /**\n   * Styles for CSS Selector `&:-webkit-autofill`\n   */ _autofill: \"&:-webkit-autofill\",\n    /**\n   * Styles for CSS Selector `&:nth-child(even)`\n   */ _even: \"&:nth-of-type(even)\",\n    /**\n   * Styles for CSS Selector `&:nth-child(odd)`\n   */ _odd: \"&:nth-of-type(odd)\",\n    /**\n   * Styles for CSS Selector `&:first-of-type`\n   */ _first: \"&:first-of-type\",\n    /**\n   * Styles for CSS selector `&::first-letter`\n   *\n   * NOTE: This selector is only applied for block-level elements and not preceded by an image or table.\n   * @example\n   * ```jsx\n   * <Text _firstLetter={{ textDecoration: 'underline' }}>Once upon a time</Text>\n   * ```\n   */ _firstLetter: \"&::first-letter\",\n    /**\n   * Styles for CSS Selector `&:last-of-type`\n   */ _last: \"&:last-of-type\",\n    /**\n   * Styles for CSS Selector `&:not(:first-of-type)`\n   */ _notFirst: \"&:not(:first-of-type)\",\n    /**\n   * Styles for CSS Selector `&:not(:last-of-type)`\n   */ _notLast: \"&:not(:last-of-type)\",\n    /**\n   * Styles for CSS Selector `&:visited`\n   */ _visited: \"&:visited\",\n    /**\n   * Used to style the active link in a navigation\n   * Styles for CSS Selector `&[aria-current=page]`\n   */ _activeLink: \"&[aria-current=page]\",\n    /**\n   * Used to style the current step within a process\n   * Styles for CSS Selector `&[aria-current=step]`\n   */ _activeStep: \"&[aria-current=step]\",\n    /**\n   * Styles to apply when the ARIA attribute `aria-checked` is `mixed`\n   * - CSS selector `&[aria-checked=mixed]`\n   */ _indeterminate: \"&:indeterminate, &[aria-checked=mixed], &[data-indeterminate]\",\n    /**\n   * Styles to apply when a parent element with `.group`, `data-group` or `role=group` is hovered\n   */ _groupHover: toGroup(state.hover),\n    /**\n   * Styles to apply when a sibling element with `.peer` or `data-peer` is hovered\n   */ _peerHover: toPeer(state.hover),\n    /**\n   * Styles to apply when a parent element with `.group`, `data-group` or `role=group` is focused\n   */ _groupFocus: toGroup(state.focus),\n    /**\n   * Styles to apply when a sibling element with `.peer` or `data-peer` is focused\n   */ _peerFocus: toPeer(state.focus),\n    /**\n   * Styles to apply when a parent element with `.group`, `data-group` or `role=group` has visible focus\n   */ _groupFocusVisible: toGroup(state.focusVisible),\n    /**\n   * Styles to apply when a sibling element with `.peer`or `data-peer` has visible focus\n   */ _peerFocusVisible: toPeer(state.focusVisible),\n    /**\n   * Styles to apply when a parent element with `.group`, `data-group` or `role=group` is active\n   */ _groupActive: toGroup(state.active),\n    /**\n   * Styles to apply when a sibling element with `.peer` or `data-peer` is active\n   */ _peerActive: toPeer(state.active),\n    /**\n   * Styles to apply when a parent element with `.group`, `data-group` or `role=group` is disabled\n   */ _groupDisabled: toGroup(state.disabled),\n    /**\n   *  Styles to apply when a sibling element with `.peer` or `data-peer` is disabled\n   */ _peerDisabled: toPeer(state.disabled),\n    /**\n   *  Styles to apply when a parent element with `.group`, `data-group` or `role=group` is invalid\n   */ _groupInvalid: toGroup(state.invalid),\n    /**\n   *  Styles to apply when a sibling element with `.peer` or `data-peer` is invalid\n   */ _peerInvalid: toPeer(state.invalid),\n    /**\n   * Styles to apply when a parent element with `.group`, `data-group` or `role=group` is checked\n   */ _groupChecked: toGroup(state.checked),\n    /**\n   * Styles to apply when a sibling element with `.peer` or `data-peer` is checked\n   */ _peerChecked: toPeer(state.checked),\n    /**\n   *  Styles to apply when a parent element with `.group`, `data-group` or `role=group` has focus within\n   */ _groupFocusWithin: toGroup(state.focusWithin),\n    /**\n   *  Styles to apply when a sibling element with `.peer` or `data-peer` has focus within\n   */ _peerFocusWithin: toPeer(state.focusWithin),\n    /**\n   * Styles to apply when a sibling element with `.peer` or `data-peer` has placeholder shown\n   */ _peerPlaceholderShown: toPeer(state.placeholderShown),\n    /**\n   * Styles for CSS Selector `&::placeholder`.\n   */ _placeholder: \"&::placeholder\",\n    /**\n   * Styles for CSS Selector `&:placeholder-shown`.\n   */ _placeholderShown: \"&:placeholder-shown\",\n    /**\n   * Styles for CSS Selector `&:fullscreen`.\n   */ _fullScreen: \"&:fullscreen\",\n    /**\n   * Styles for CSS Selector `&::selection`\n   */ _selection: \"&::selection\",\n    /**\n   * Styles for CSS Selector `[dir=rtl] &`\n   * It is applied when a parent element or this element has `dir=\"rtl\"`\n   */ _rtl: \"[dir=rtl] &, &[dir=rtl]\",\n    /**\n   * Styles for CSS Selector `[dir=ltr] &`\n   * It is applied when a parent element or this element has `dir=\"ltr\"`\n   */ _ltr: \"[dir=ltr] &, &[dir=ltr]\",\n    /**\n   * Styles for CSS Selector `@media (prefers-color-scheme: dark)`\n   * It is used when the user has requested the system use a light or dark color theme.\n   */ _mediaDark: \"@media (prefers-color-scheme: dark)\",\n    /**\n   * Styles for CSS Selector `@media (prefers-reduced-motion: reduce)`\n   * It is used when the user has requested the system to reduce the amount of animations.\n   */ _mediaReduceMotion: \"@media (prefers-reduced-motion: reduce)\",\n    /**\n   * Styles for when `data-theme` is applied to any parent of\n   * this component or element.\n   */ _dark: \".chakra-ui-dark &:not([data-theme]),[data-theme=dark] &:not([data-theme]),&[data-theme=dark]\",\n    /**\n   * Styles for when `data-theme` is applied to any parent of\n   * this component or element.\n   */ _light: \".chakra-ui-light &:not([data-theme]),[data-theme=light] &:not([data-theme]),&[data-theme=light]\",\n    /**\n   * Styles for the CSS Selector `&[data-orientation=horizontal]`\n   */ _horizontal: \"&[data-orientation=horizontal]\",\n    /**\n   * Styles for the CSS Selector `&[data-orientation=vertical]`\n   */ _vertical: \"&[data-orientation=vertical]\"\n};\nvar pseudoPropNames = Object.keys(pseudoSelectors);\n// src/create-theme-vars/create-theme-vars.ts\n\nfunction tokenToCssVar(token, prefix) {\n    return cssVar(String(token).replace(/\\./g, \"-\"), void 0, prefix);\n}\nfunction createThemeVars(flatTokens, options) {\n    let cssVars = {};\n    const cssMap = {};\n    for (const [token, tokenValue] of Object.entries(flatTokens)){\n        const { isSemantic, value } = tokenValue;\n        const { variable, reference } = tokenToCssVar(token, options == null ? void 0 : options.cssVarPrefix);\n        if (!isSemantic) {\n            if (token.startsWith(\"space\")) {\n                const keys2 = token.split(\".\");\n                const [firstKey, ...referenceKeys] = keys2;\n                const negativeLookupKey = `${firstKey}.-${referenceKeys.join(\".\")}`;\n                const negativeValue = calc.negate(value);\n                const negatedReference = calc.negate(reference);\n                cssMap[negativeLookupKey] = {\n                    value: negativeValue,\n                    var: variable,\n                    varRef: negatedReference\n                };\n            }\n            cssVars[variable] = value;\n            cssMap[token] = {\n                value,\n                var: variable,\n                varRef: reference\n            };\n            continue;\n        }\n        const lookupToken = (maybeToken)=>{\n            const scale = String(token).split(\".\")[0];\n            const withScale = [\n                scale,\n                maybeToken\n            ].join(\".\");\n            const resolvedTokenValue = flatTokens[withScale];\n            if (!resolvedTokenValue) return maybeToken;\n            const { reference: reference2 } = tokenToCssVar(withScale, options == null ? void 0 : options.cssVarPrefix);\n            return reference2;\n        };\n        const normalizedValue = (0,_chakra_ui_shared_utils__WEBPACK_IMPORTED_MODULE_0__.isObject)(value) ? value : {\n            default: value\n        };\n        cssVars = lodash_mergewith__WEBPACK_IMPORTED_MODULE_1__(cssVars, Object.entries(normalizedValue).reduce((acc, [conditionAlias, conditionValue])=>{\n            var _a, _b;\n            if (!conditionValue) return acc;\n            const tokenReference = lookupToken(`${conditionValue}`);\n            if (conditionAlias === \"default\") {\n                acc[variable] = tokenReference;\n                return acc;\n            }\n            const conditionSelector = (_b = (_a = pseudoSelectors) == null ? void 0 : _a[conditionAlias]) != null ? _b : conditionAlias;\n            acc[conditionSelector] = {\n                [variable]: tokenReference\n            };\n            return acc;\n        }, {}));\n        cssMap[token] = {\n            value: reference,\n            var: variable,\n            varRef: reference\n        };\n    }\n    return {\n        cssVars,\n        cssMap\n    };\n}\n// ../../utilities/object-utils/src/omit.ts\nfunction omit(object, keysToOmit = []) {\n    const clone = Object.assign({}, object);\n    for (const key of keysToOmit){\n        if (key in clone) {\n            delete clone[key];\n        }\n    }\n    return clone;\n}\n// ../../utilities/object-utils/src/pick.ts\nfunction pick(object, keysToPick) {\n    const result = {};\n    for (const key of keysToPick){\n        if (key in object) {\n            result[key] = object[key];\n        }\n    }\n    return result;\n}\n// ../../utilities/object-utils/src/walk-object.ts\nfunction isObject5(value) {\n    return typeof value === \"object\" && value != null && !Array.isArray(value);\n}\nfunction walkObject(target, predicate, options = {}) {\n    const { stop, getKey } = options;\n    function inner(value, path = []) {\n        var _a;\n        if (isObject5(value) || Array.isArray(value)) {\n            const result = {};\n            for (const [prop, child] of Object.entries(value)){\n                const key = (_a = getKey == null ? void 0 : getKey(prop)) != null ? _a : prop;\n                const childPath = [\n                    ...path,\n                    key\n                ];\n                if (stop == null ? void 0 : stop(value, childPath)) {\n                    return predicate(value, path);\n                }\n                result[key] = inner(child, childPath);\n            }\n            return result;\n        }\n        return predicate(value, path);\n    }\n    return inner(target);\n}\n// src/create-theme-vars/theme-tokens.ts\nvar tokens = [\n    \"colors\",\n    \"borders\",\n    \"borderWidths\",\n    \"borderStyles\",\n    \"fonts\",\n    \"fontSizes\",\n    \"fontWeights\",\n    \"gradients\",\n    \"letterSpacings\",\n    \"lineHeights\",\n    \"radii\",\n    \"space\",\n    \"shadows\",\n    \"sizes\",\n    \"zIndices\",\n    \"transition\",\n    \"blur\",\n    \"breakpoints\"\n];\nfunction extractTokens(theme) {\n    const _tokens = tokens;\n    return pick(theme, _tokens);\n}\nfunction extractSemanticTokens(theme) {\n    return theme.semanticTokens;\n}\nfunction omitVars(rawTheme) {\n    const { __cssMap, __cssVars, __breakpoints, ...cleanTheme } = rawTheme;\n    return cleanTheme;\n}\n// src/create-theme-vars/flatten-tokens.ts\nvar isSemanticCondition = (key)=>pseudoPropNames.includes(key) || \"default\" === key;\nfunction flattenTokens({ tokens: tokens2, semanticTokens }) {\n    const result = {};\n    walkObject(tokens2, (value, path)=>{\n        if (value == null) return;\n        result[path.join(\".\")] = {\n            isSemantic: false,\n            value\n        };\n    });\n    walkObject(semanticTokens, (value, path)=>{\n        if (value == null) return;\n        result[path.join(\".\")] = {\n            isSemantic: true,\n            value\n        };\n    }, {\n        stop: (value)=>Object.keys(value).every(isSemanticCondition)\n    });\n    return result;\n}\n// src/create-theme-vars/to-css-var.ts\nfunction toCSSVar(rawTheme) {\n    var _a;\n    const theme = omitVars(rawTheme);\n    const tokens2 = extractTokens(theme);\n    const semanticTokens = extractSemanticTokens(theme);\n    const flatTokens = flattenTokens({\n        tokens: tokens2,\n        semanticTokens\n    });\n    const cssVarPrefix = (_a = theme.config) == null ? void 0 : _a.cssVarPrefix;\n    const { /**\n     * This is more like a dictionary of tokens users will type `green.500`,\n     * and their equivalent css variable.\n     */ cssMap, /**\n     * The extracted css variables will be stored here, and used in\n     * the emotion's <Global/> component to attach variables to `:root`\n     */ cssVars } = createThemeVars(flatTokens, {\n        cssVarPrefix\n    });\n    const defaultCssVars = {\n        \"--chakra-ring-inset\": \"var(--chakra-empty,/*!*/ /*!*/)\",\n        \"--chakra-ring-offset-width\": \"0px\",\n        \"--chakra-ring-offset-color\": \"#fff\",\n        \"--chakra-ring-color\": \"rgba(66, 153, 225, 0.6)\",\n        \"--chakra-ring-offset-shadow\": \"0 0 #0000\",\n        \"--chakra-ring-shadow\": \"0 0 #0000\",\n        \"--chakra-space-x-reverse\": \"0\",\n        \"--chakra-space-y-reverse\": \"0\"\n    };\n    Object.assign(theme, {\n        __cssVars: {\n            ...defaultCssVars,\n            ...cssVars\n        },\n        __cssMap: cssMap,\n        __breakpoints: analyzeBreakpoints(theme.breakpoints)\n    });\n    return theme;\n}\n// src/css.ts\n\n\n// src/system.ts\n\nvar systemProps = lodash_mergewith__WEBPACK_IMPORTED_MODULE_1__({}, background, border, color, flexbox, layout, filter, ring, interactivity, grid, others, position, effect, space, scroll, typography, textDecoration, transform, list, transition);\nvar layoutSystem = Object.assign({}, space, layout, flexbox, grid, position);\nvar layoutPropNames = Object.keys(layoutSystem);\nvar propNames = [\n    ...Object.keys(systemProps),\n    ...pseudoPropNames\n];\nvar styleProps = {\n    ...systemProps,\n    ...pseudoSelectors\n};\nvar isStyleProp = (prop)=>prop in styleProps;\n// src/utils/expand-responsive.ts\n\nvar expandResponsive = (styles)=>(theme)=>{\n        if (!theme.__breakpoints) return styles;\n        const { isResponsive, toArrayValue, media: medias } = theme.__breakpoints;\n        const computedStyles = {};\n        for(const key in styles){\n            let value = (0,_chakra_ui_shared_utils__WEBPACK_IMPORTED_MODULE_0__.runIfFn)(styles[key], theme);\n            if (value == null) continue;\n            value = (0,_chakra_ui_shared_utils__WEBPACK_IMPORTED_MODULE_0__.isObject)(value) && isResponsive(value) ? toArrayValue(value) : value;\n            if (!Array.isArray(value)) {\n                computedStyles[key] = value;\n                continue;\n            }\n            const queries = value.slice(0, medias.length).length;\n            for(let index = 0; index < queries; index += 1){\n                const media = medias == null ? void 0 : medias[index];\n                if (!media) {\n                    computedStyles[key] = value[index];\n                    continue;\n                }\n                computedStyles[media] = computedStyles[media] || {};\n                if (value[index] == null) {\n                    continue;\n                }\n                computedStyles[media][key] = value[index];\n            }\n        }\n        return computedStyles;\n    };\n// src/utils/split-by-comma.ts\nfunction splitByComma(value) {\n    const chunks = [];\n    let chunk = \"\";\n    let inParens = false;\n    for(let i = 0; i < value.length; i++){\n        const char = value[i];\n        if (char === \"(\") {\n            inParens = true;\n            chunk += char;\n        } else if (char === \")\") {\n            inParens = false;\n            chunk += char;\n        } else if (char === \",\" && !inParens) {\n            chunks.push(chunk);\n            chunk = \"\";\n        } else {\n            chunk += char;\n        }\n    }\n    chunk = chunk.trim();\n    if (chunk) {\n        chunks.push(chunk);\n    }\n    return chunks;\n}\n// src/css.ts\nfunction isCssVar2(value) {\n    return /^var\\(--.+\\)$/.test(value);\n}\nvar isCSSVariableTokenValue = (key, value)=>key.startsWith(\"--\") && typeof value === \"string\" && !isCssVar2(value);\nvar resolveTokenValue = (theme, value)=>{\n    var _a, _b;\n    if (value == null) return value;\n    const getVar = (val)=>{\n        var _a2, _b2;\n        return (_b2 = (_a2 = theme.__cssMap) == null ? void 0 : _a2[val]) == null ? void 0 : _b2.varRef;\n    };\n    const getValue = (val)=>{\n        var _a2;\n        return (_a2 = getVar(val)) != null ? _a2 : val;\n    };\n    const [tokenValue, fallbackValue] = splitByComma(value);\n    value = (_b = (_a = getVar(tokenValue)) != null ? _a : getValue(fallbackValue)) != null ? _b : getValue(value);\n    return value;\n};\nfunction getCss(options) {\n    const { configs = {}, pseudos = {}, theme } = options;\n    const css2 = (stylesOrFn, nested = false)=>{\n        var _a, _b, _c;\n        const _styles = (0,_chakra_ui_shared_utils__WEBPACK_IMPORTED_MODULE_0__.runIfFn)(stylesOrFn, theme);\n        const styles = expandResponsive(_styles)(theme);\n        let computedStyles = {};\n        for(let key in styles){\n            const valueOrFn = styles[key];\n            let value = (0,_chakra_ui_shared_utils__WEBPACK_IMPORTED_MODULE_0__.runIfFn)(valueOrFn, theme);\n            if (key in pseudos) {\n                key = pseudos[key];\n            }\n            if (isCSSVariableTokenValue(key, value)) {\n                value = resolveTokenValue(theme, value);\n            }\n            let config = configs[key];\n            if (config === true) {\n                config = {\n                    property: key\n                };\n            }\n            if ((0,_chakra_ui_shared_utils__WEBPACK_IMPORTED_MODULE_0__.isObject)(value)) {\n                computedStyles[key] = (_a = computedStyles[key]) != null ? _a : {};\n                computedStyles[key] = lodash_mergewith__WEBPACK_IMPORTED_MODULE_1__({}, computedStyles[key], css2(value, true));\n                continue;\n            }\n            let rawValue = (_c = (_b = config == null ? void 0 : config.transform) == null ? void 0 : _b.call(config, value, theme, _styles)) != null ? _c : value;\n            rawValue = (config == null ? void 0 : config.processResult) ? css2(rawValue, true) : rawValue;\n            const configProperty = (0,_chakra_ui_shared_utils__WEBPACK_IMPORTED_MODULE_0__.runIfFn)(config == null ? void 0 : config.property, theme);\n            if (!nested && (config == null ? void 0 : config.static)) {\n                const staticStyles = (0,_chakra_ui_shared_utils__WEBPACK_IMPORTED_MODULE_0__.runIfFn)(config.static, theme);\n                computedStyles = lodash_mergewith__WEBPACK_IMPORTED_MODULE_1__({}, computedStyles, staticStyles);\n            }\n            if (configProperty && Array.isArray(configProperty)) {\n                for (const property of configProperty){\n                    computedStyles[property] = rawValue;\n                }\n                continue;\n            }\n            if (configProperty) {\n                if (configProperty === \"&\" && (0,_chakra_ui_shared_utils__WEBPACK_IMPORTED_MODULE_0__.isObject)(rawValue)) {\n                    computedStyles = lodash_mergewith__WEBPACK_IMPORTED_MODULE_1__({}, computedStyles, rawValue);\n                } else {\n                    computedStyles[configProperty] = rawValue;\n                }\n                continue;\n            }\n            if ((0,_chakra_ui_shared_utils__WEBPACK_IMPORTED_MODULE_0__.isObject)(rawValue)) {\n                computedStyles = lodash_mergewith__WEBPACK_IMPORTED_MODULE_1__({}, computedStyles, rawValue);\n                continue;\n            }\n            computedStyles[key] = rawValue;\n        }\n        return computedStyles;\n    };\n    return css2;\n}\nvar css = (styles)=>(theme)=>{\n        const cssFn = getCss({\n            theme,\n            pseudos: pseudoSelectors,\n            configs: systemProps\n        });\n        return cssFn(styles);\n    };\n// src/define-styles.ts\nfunction defineStyle(styles) {\n    return styles;\n}\nfunction defineStyleConfig(config) {\n    return config;\n}\nfunction createMultiStyleConfigHelpers(parts) {\n    return {\n        definePartsStyle (config) {\n            return config;\n        },\n        defineMultiStyleConfig (config) {\n            return {\n                parts,\n                ...config\n            };\n        }\n    };\n}\n// src/style-config.ts\n\n\nfunction normalize2(value, toArray) {\n    if (Array.isArray(value)) return value;\n    if ((0,_chakra_ui_shared_utils__WEBPACK_IMPORTED_MODULE_0__.isObject)(value)) return toArray(value);\n    if (value != null) return [\n        value\n    ];\n}\nfunction getNextIndex(values, i) {\n    for(let j = i + 1; j < values.length; j++){\n        if (values[j] != null) return j;\n    }\n    return -1;\n}\nfunction createResolver(theme) {\n    const breakpointUtil = theme.__breakpoints;\n    return function resolver(config, prop, value, props) {\n        var _a, _b;\n        if (!breakpointUtil) return;\n        const result = {};\n        const normalized = normalize2(value, breakpointUtil.toArrayValue);\n        if (!normalized) return result;\n        const len = normalized.length;\n        const isSingle = len === 1;\n        const isMultipart = !!config.parts;\n        for(let i = 0; i < len; i++){\n            const key = breakpointUtil.details[i];\n            const nextKey = breakpointUtil.details[getNextIndex(normalized, i)];\n            const query = toMediaQueryString(key.minW, nextKey == null ? void 0 : nextKey._minW);\n            const styles = (0,_chakra_ui_shared_utils__WEBPACK_IMPORTED_MODULE_0__.runIfFn)((_a = config[prop]) == null ? void 0 : _a[normalized[i]], props);\n            if (!styles) continue;\n            if (isMultipart) {\n                (_b = config.parts) == null ? void 0 : _b.forEach((part)=>{\n                    lodash_mergewith__WEBPACK_IMPORTED_MODULE_1__(result, {\n                        [part]: isSingle ? styles[part] : {\n                            [query]: styles[part]\n                        }\n                    });\n                });\n                continue;\n            }\n            if (!isMultipart) {\n                if (isSingle) lodash_mergewith__WEBPACK_IMPORTED_MODULE_1__(result, styles);\n                else result[query] = styles;\n                continue;\n            }\n            result[query] = styles;\n        }\n        return result;\n    };\n}\nfunction resolveStyleConfig(config) {\n    return (props)=>{\n        var _a;\n        const { variant, size, theme } = props;\n        const recipe = createResolver(theme);\n        return lodash_mergewith__WEBPACK_IMPORTED_MODULE_1__({}, (0,_chakra_ui_shared_utils__WEBPACK_IMPORTED_MODULE_0__.runIfFn)((_a = config.baseStyle) != null ? _a : {}, props), recipe(config, \"sizes\", size, props), recipe(config, \"variants\", variant, props));\n    };\n}\n// src/get-css-var.ts\nfunction getCSSVar(theme, scale, value) {\n    var _a, _b, _c;\n    return (_c = (_b = (_a = theme.__cssMap) == null ? void 0 : _a[`${scale}.${value}`]) == null ? void 0 : _b.varRef) != null ? _c : value;\n}\n// src/theming-props.ts\nfunction omitThemingProps(props) {\n    return omit(props, [\n        \"styleConfig\",\n        \"size\",\n        \"variant\",\n        \"colorScheme\"\n    ]);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@chakra-ui+styled-system@2.9.2/node_modules/@chakra-ui/styled-system/dist/index.mjs\n");

/***/ })

};
;